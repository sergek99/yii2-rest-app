{"version":3,"sources":["ng-tree-dnd.js"],"names":["isUndefinedOrNull","val","angular","isUndefined","isDefined","fnInitTreeDnD","$timeout","$http","$compile","$parse","$window","$document","$templateCache","$TreeDnDTemplate","$TreeDnDClass","$TreeDnDHelper","$TreeDnDPlugin","$TreeDnDViewport","fnController","$scope","$element","$attrs","timeLoadData","treeData","tmpTreeData","reload_data","timeReloadData","check_exist_attr","attrs","existAttr","isAnd","isArray","for_each_attrs","exist","i","len","length","passed","generateWatch","type","nameAttr","valDefault","nameScope","fnNotExist","fnAfter","fnBefore","isFunction","$watch","indexOf","$safeApply","fn","phase","this","$root","$$phase","$apply","getExpandOn","_len","_firstNode","_keys","Object","keys","_regex","RegExp","test","expandingProperty","getColDefs","_col_defs","push","field","colDefinitions","do_f","root","node","parent","parent_real","level","visible","index","_i","_icon","_index_real","_dept","_hashKey","__children__","__parent_real__","__parent__","__expanded__","expandLevel","__index__","__index_real__","__level__","__icon__","__icon_class__","$class","icon","__visible__","__uid__","Math","random","primary_key","getHash","__hashKey__","__dept__","oData","console","time","_data","_tree_nodes","expandOn","columnDefs","orderBy","_fnInitOrderBy","filter","_fnInitFilter","filterOptions","_offset","_max","_min","_deptTotal","$globals","abs","tree_nodes","timeEnd","indent","indent_plus","indent_unit","$tree_class","$type","copy","extend","1","iconExpand","0","iconCollapse","-1","iconLeaf","for_all_descendants","checkSibling","_nodes","getLastDescendant","last_child","n","tree","selected_node","getElementChilds","element","querySelector","onClick","on_click","setTimeout","onSelect","select_node","on_select","passedExpand","_clone","toggleExpand","fnCallback","$callbacks","expand","accept","dragInfo","moveTo","isChanged","dropEnabled","calsIndent","skipUnit","skipEdge","unit","edge","droppable","draggable","dragEnabled","beforeDrop","event","changeKey","_key","__selected__","replace","clone","_this","remove","temp","splice","add","pos","setScope","scope","_hash","getScope","enableDrag","enableDrop","placeElm","horizontal","dragDelay","enabledMove","statusMove","enabledHotkey","enabledCollapse","statusElm","dragging","beforeDrag","scopeDrag","dragStop","skiped","changed","target","drag","enable","dropped","info","pass","_node","_nodeAdd","_move","move","_parent","_parentRemove","_parentAdd","isMove","dragStart","dragMove","setDragging","enableMove","enableStatus","enabledStatus","hideStatus","addClass","hidden","refreshStatus","statusElmOld","getMove","getCopy","attr","find","append","removeClass","setPositionStatus","e","css","left","pageX","top","pageY","z-index","status","targeting","getPrevSibling","_index","getNode","initPlace","dragElm","isTable","document","createElement","_len_down","empty","place","height","parentNode","insertBefore","hidePlace","showPlace","getScopeTree","_fnGetControl","w","_curW","_typeW","_nameW","_defaultW","_scopeW","_NotW","_AfterW","_BeforeW","_defaultFilterOption","showParent","showChild","beginAnd","_watches","isHotkey","templateCopy","_url","get","setCopy","templateMove","setMove","treeClass","trim","$tree","colDefs","filters","_passed","_iF","_keysF","_lenF","enabledFilter","option","primaryKey","indentUnit","optCallbacks","forEach","value","key","lenW","equals","updateLimit","$TreeLimit","fnCompile","tElement","$_Template","_element","html","_fnInitDrag","ready","checkTreeTable","template","attrInclude","elemNode","treeInclude","cache","success","data","tempDiv","innerHTML","setTemplate","templateNode","promiseCheck","then","templateUrl","getPath","restrict","controller","compile","fnInitTreeDnDViewport","$q","update","viewportRect","width","eWindow","prop","documentElement","clientWidth","clientHeight","body","scrollTop","scrollLeft","isUpdating","isRender","updateAgain","recursivePromise","item","number","items","renderTime","cancel","setViewport","viewport","getViewport","updateDelayed","updateTimeout","nodeTemplate","getItems","$initViewport","on","module","constant","nodes","handle","directive","link","new_val","compileReplace","replaceWith","$node_class","fnLink","fnWatchNode","newVal","oldVal","fnHiddenChild","nodeScope","nodeNew","keyNode","first","enabledDnD","treeDndNode","getData","log","__inited__","getScopeNode","$nodes_class","$inject","factory","_$initConvert","line2tree","parentKey","parentId","rootIds","_primary","treeObjs","tree2tree","access_child","containKey","_copy","_child","_tree","_$helper","nodrag","targetElm","eventObj","obj","undefined","targetTouches","originalEvent","drop","offset","boundingClientRect","getBoundingClientRect","pageYOffset","pageXOffset","positionStarted","offsetX","offsetY","startX","lastX","startY","lastY","nowX","nowY","distX","distY","dirAx","dirX","dirY","lastDirX","lastDirY","distAxX","distAxY","positionMoved","firstMoving","newAx","moving","replaceIndent","children","$injector","_fnget","name","has","templatePath","copyPath","movePath","scopes","_$init","path","$id","$filter","options","fieldChild","parentPassed","_nodePassed","_childPassed","_fnCheck","callback","err","_fnProccess","condition","for_each_filter","_iO","_keysO","_lenO","_callback","conditions","_fnAfter","isNodePassed","isChildPassed","isParentPassed","__filtered__","__filtered_visible__","_fnBefore","_fnConvert","_filter","_state","isObject","fnInitFilter","keyChild","_fnOrderBy","fnOrderBy","_fnOrder","list","_fnMain","isString","_fnPlaceHolder","$params","_fnDragStart","hasTouch","button","which","uiTreeDragging","eventElm","eventScope","dragScope","eventElmTagName","toLowerCase","_$scope","preventDefault","offsetEdge","_tbody","_frag","_width","_scope","_needCollapse","_copied","createDocumentFragment","bind","dragEndEvent","dragMoveEvent","dragCancelEvent","document_height","max","scrollHeight","offsetHeight","document_width","scrollWidth","offsetWidth","_fnDragMove","dragStarted","dragDelaying","getSelection","removeAllRanges","selection","leftElmPos","topElmPos","top_scroll","window","bottom_scroll","innerHeight","scrollBy","targetScope","targetBefore","targetOffset","isEmpty","isSwapped","_target","fnSwapTree","targetX","targetY","isVeritcal","_info","_drag","_drop","treeScope","isHolder","elementFromPoint","_height","_prev","dragBorder","after","prepend","_fnDragEnd","_status","$$apply","_fnBindDrag","unbind","_fnDragStartEvent","dragTimer","_fnKeydownHandler","keyCode","shiftKey","_fnKeyupHandler","bindDrag","dragEnd","keydownHandler","keyupHandler","$on","fnSetCollapse","fnSetExpand","expand_all_parents","deselect_node","get_parent","for_all_ancestors","child","collapse_all_parents","add_node","new_node","add_node_root","expand_all","collapse_all","remove_node","expand_node","collapse_node","get_selected_node","get_first_node","get_children","get_siblings","get_next_sibling","get_prev_sibling","get_first_child","get_closest_ancestor_next_sibling","get_next_node","get_prev_node","get_last_descendant","select_parent_node","select_first_node","firstNode","select_next_sibling","select_prev_sibling","select_next_node","select_prev_node","run","put","join"],"mappings":"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","file":"ng-tree-dnd.min.js","sourcesContent":["/**\r\n * The MIT License (MIT)\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to\r\n * deal in the Software without restriction, including without limitation the\r\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\r\n * sell copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\r\n * IN THE SOFTWARE.\r\n * @preserve\r\n */\r\n\r\n/**\r\n * Implementing TreeDnD & Event DrapnDrop (allow drag multi tree-table include all type: table, ol, ul)\r\n * Demo: http://thienhung1989.github.io/angular-tree-dnd\r\n * Github: https://github.com/thienhung1989/angular-tree-dnd\r\n * @version 3.0.4\r\n * @preserve\r\n * (c) 2015 Nguyuễn Thiện Hùng - <nguyenthienhung1989@gmail.com>\r\n */\r\n(function () {\r\n    'use strict';\r\n    angular.isUndefinedOrNull = isUndefinedOrNull;\r\n    angular.isDefined = isDefined;\r\n\r\n    function isUndefinedOrNull(val) {\r\n        return angular.isUndefined(val) || val === null;\r\n    }\r\n\r\n    function isDefined(val) {\r\n        return !(angular.isUndefined(val) || val === null);\r\n    }\r\n\r\n    angular.module('ntt.TreeDnD', ['template/TreeDnD/TreeDnD.html'])\r\n        .constant(\r\n        '$TreeDnDClass', {\r\n            tree:   'tree-dnd',\r\n            empty:  'tree-dnd-empty',\r\n            hidden: 'tree-dnd-hidden',\r\n            node:   'tree-dnd-node',\r\n            nodes:  'tree-dnd-nodes',\r\n            handle: 'tree-dnd-handle',\r\n            place:  'tree-dnd-placeholder',\r\n            drag:   'tree-dnd-drag',\r\n            status: 'tree-dnd-status',\r\n            icon:   {\r\n                '1':  'glyphicon glyphicon-minus',\r\n                '0':  'glyphicon glyphicon-plus',\r\n                '-1': 'glyphicon glyphicon-file'\r\n            }\r\n        }\r\n    );angular.module('ntt.TreeDnD')\r\n    .directive(\r\n    'compile', [\r\n        '$compile', function ($compile) {\r\n            return {\r\n                restrict: 'A',\r\n                link:     function (scope, element, attrs) {\r\n                    scope.$watch(\r\n                        attrs.compile, function (new_val) {\r\n                            if (new_val) {\r\n                                if (angular.isFunction(element.empty)) {\r\n                                    element.empty();\r\n                                } else {\r\n                                    element.html('');\r\n                                }\r\n\r\n                                element.append($compile(new_val)(scope));\r\n                            }\r\n                        }\r\n                    );\r\n                }\r\n            };\r\n        }]\r\n)\r\n    .directive(\r\n    'compileReplace', [\r\n        '$compile', function ($compile) {\r\n            return {\r\n                restrict: 'A',\r\n                link:     function (scope, element, attrs) {\r\n                    scope.$watch(\r\n                        attrs.compileReplace, function (new_val) {\r\n                            if (new_val) {\r\n                                element.replaceWith($compile(new_val)(scope));\r\n                            }\r\n                        }\r\n                    );\r\n                }\r\n            };\r\n        }]\r\n);\n\nangular.module('ntt.TreeDnD')\r    .directive(\r    'treeDndNodeHandle', function () {\r        return {\r            restrict: 'A',\r            scope:    true,\r            link:     function (scope, element, attrs) {\r                scope.$type = 'TreeDnDNodeHandle';\r                if (scope.$class.handle) {\r                    element.addClass(scope.$class.handle);\r                }\r            }\r        };\r    }\r);\n\nangular.module('ntt.TreeDnD')\r\n    .directive(\r\n    'treeDndNode', ['$TreeDnDViewport', '$timeout', function ($TreeDnDViewport, $timeout) {\r\n        return {\r\n            restrict:   'A',\r\n            replace:    true,\r\n            controller: fnController,\r\n            link:       fnLink\r\n        };\r\n\r\n        function fnController($scope, $element/*, $attrs*/) {\r\n            $scope.$node_class = '';\r\n\r\n            if ($scope.$class.node) {\r\n                $element.addClass($scope.$class.node);\r\n                $scope.$node_class = $scope.$class.node;\r\n            }\r\n\r\n        }\r\n\r\n        function fnLink(scope, element, attrs) {\r\n\r\n            var enabledDnD            = typeof scope.dragEnabled === 'boolean' || typeof scope.dropEnabled === 'boolean',\r\n                keyNode               = attrs.treeDndNode,\r\n                first                 = true;\r\n\r\n            $TreeDnDViewport.add(scope, element);\r\n\r\n            if (enabledDnD) {\r\n                scope.$type = 'TreeDnDNode';\r\n\r\n                scope.getData = function () {\r\n                    return scope[keyNode];\r\n                };\r\n            }\r\n            console.log('Create Node', scope[keyNode])\r\n            scope.$element            = element;\r\n            scope[keyNode].__inited__ = true;\r\n\r\n            /*if (scope[keyNode].__index_real__ === scope.$TreeLimit - 1) {\r\n             console.time('Call_fnTimeGenerate_Node');\r\n             $timeout(function () {\r\n             scope.updateLimit();\r\n             console.log(scope.$TreeLimit);\r\n             console.timeEnd('Call_fnTimeGenerate_Node');\r\n             }, 2000, false);\r\n             }*/\r\n\r\n            scope.setScope(scope, scope[keyNode]);\r\n\r\n            scope.getElementChilds = function () {\r\n                return angular.element(element[0].querySelector('[tree-dnd-nodes]'));\r\n            };\r\n\r\n            scope.getScopeNode = function () {\r\n                return scope;\r\n            };\r\n\r\n            scope.$watch(keyNode, fnWatchNode, true);\r\n\r\n            function fnWatchNode(newVal, oldVal, scope) {\r\n                if (!newVal.__visible__) {\r\n                    element.addClass(scope.$class.hidden);\r\n                }\r\n\r\n                //console.time('Node_Changed');\r\n                var nodeNew = newVal, _nodes = scope[keyNode].__children__,\r\n                    _len    = _nodes.length, _i,\r\n                    _icon;\r\n\r\n                if (_len === 0) {\r\n                    _icon = -1;\r\n                } else {\r\n                    if (nodeNew.__expanded__) {\r\n                        _icon = 1;\r\n                    } else {\r\n                        _icon = 0;\r\n                    }\r\n                }\r\n\r\n                nodeNew.__icon__       = _icon;\r\n                nodeNew.__icon_class__ = scope.$class.icon[_icon];\r\n\r\n                if (!first) {\r\n                    if (newVal.__expanded__ !== oldVal.__expanded__) {\r\n                        //if (scope.isTable) {\r\n                        for (_i = 0; _i < _len; _i++) {\r\n                            scope.for_all_descendants(_nodes[_i], fnHiddenChild, nodeNew, true);\r\n                        }\r\n                        //} else {\r\n                        //    if (!childsElem) {\r\n                        //        childsElem = scope.getElementChilds();\r\n                        //    }\r\n                        //\r\n                        //    if (nodeNew.__expanded__) {\r\n                        //        childsElem.removeClass(scope.$class.hidden);\r\n                        //    } else {\r\n                        //        childsElem.addClass(scope.$class.hidden);\r\n                        //    }\r\n                        //}\r\n                        //console.timeEnd('Node_Changed');\r\n                    }\r\n                }\r\n\r\n                first = false;\r\n\r\n                function fnHiddenChild(node, parent) {\r\n                    //node.__visible__ = nodeNew.__expanded__ && (node.__visible__ || parent.__expanded__);\r\n                    var nodeScope = scope.getScope(node);\r\n                    if (nodeScope) {\r\n                        if (nodeNew.__expanded__ && (node.__visible__ || parent.__expanded__)) {\r\n                            nodeScope.$element.removeClass(scope.$class.hidden);\r\n                            node.__visible__ = true;\r\n                        } else {\r\n                            nodeScope.$element.addClass(scope.$class.hidden);\r\n                            node.__visible__ = false;\r\n                        }\r\n                    } else {\r\n                        // show node & init scope\r\n                        node.__visible__ = true;\r\n                    }\r\n\r\n                    // skip all child hiding... if not expaned\r\n                    return !node.__expanded__;\r\n                }\r\n            }\r\n        }\r\n    }]\r\n);\n\nangular.module('ntt.TreeDnD')\r\n    .directive(\r\n    'treeDndNodes', function () {\r\n        return {\r\n            restrict: 'A',\r\n            replace:  true,\r\n            scope:    true,\r\n            link:     function (scope, element/*, attrs*/) {\r\n                scope.$type = 'TreeDnDNodes';\r\n\r\n                if (scope.$class.nodes) {\r\n                    element.addClass(scope.$class.nodes);\r\n                    scope.$nodes_class = scope.$class.nodes;\r\n                } else {\r\n                    scope.$nodes_class = '';\r\n                }\r\n            }\r\n        };\r\n    }\r\n);\n\nangular.module('ntt.TreeDnD')\r\n    .directive(\r\n    'treeDnd', fnInitTreeDnD);\r\n\r\nfnInitTreeDnD.$inject = [\r\n    '$timeout', '$http', '$compile', '$parse', '$window', '$document', '$templateCache',\r\n    '$TreeDnDTemplate', '$TreeDnDClass', '$TreeDnDHelper', '$TreeDnDPlugin', '$TreeDnDViewport'\r\n];\r\n\r\nfunction fnInitTreeDnD($timeout, $http, $compile, $parse, $window, $document, $templateCache,\r\n                       $TreeDnDTemplate, $TreeDnDClass, $TreeDnDHelper, $TreeDnDPlugin, $TreeDnDViewport\r\n) {\r\n    return {\r\n        restrict:   'E',\r\n        scope:      true,\r\n        replace:    true,\r\n        controller: ['$scope', '$element', '$attrs', fnController],\r\n        compile:    fnCompile\r\n    };\r\n\r\n    function fnController($scope, $element, $attrs) {\r\n        $scope.indent      = 20;\r\n        $scope.indent_plus = 15;\r\n        $scope.indent_unit = 'px';\r\n        $scope.$tree_class = 'table';\r\n        $scope.primary_key = '__uid__';\r\n\r\n        $scope.$type = 'TreeDnD';\r\n        // $scope.enabledFilter = null;\r\n        $scope.colDefinitions = [];\r\n        $scope.$globals       = {};\r\n        $scope.$class         = {};\r\n\r\n        $scope.treeData   = [];\r\n        $scope.tree_nodes = [];\r\n\r\n        $scope.$class = angular.copy($TreeDnDClass);\r\n        angular.extend(\r\n            $scope.$class.icon, {\r\n                '1':  $attrs.iconExpand || 'glyphicon glyphicon-minus',\r\n                '0':  $attrs.iconCollapse || 'glyphicon glyphicon-plus',\r\n                '-1': $attrs.iconLeaf || 'glyphicon glyphicon-file'\r\n            }\r\n        );\r\n\r\n        $scope.for_all_descendants = function (node, fn, parent, checkSibling) {\r\n            if (angular.isFunction(fn)) {\r\n                var _i, _len, _nodes;\r\n\r\n                if (fn(node, parent)) {\r\n                    return false;\r\n                }\r\n                _nodes = node.__children__;\r\n                _len   = _nodes.length;\r\n                for (_i = 0; _i < _len; _i++) {\r\n                    if (!$scope.for_all_descendants(_nodes[_i], fn, node) && !checkSibling) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n            return true;\r\n        };\r\n\r\n        $scope.getLastDescendant = function (node) {\r\n            var last_child, n;\r\n            if (!node) {\r\n                node = $scope.tree ? $scope.tree.selected_node : false;\r\n            }\r\n            if (node === false) {\r\n                return false;\r\n            }\r\n            n = node.__children__.length;\r\n            if (n === 0) {\r\n                return node;\r\n            } else {\r\n                last_child = node.__children__[n - 1];\r\n                return $scope.getLastDescendant(last_child);\r\n            }\r\n        };\r\n\r\n        $scope.getElementChilds = function () {\r\n            return angular.element($element[0].querySelector('[tree-dnd-nodes]'));\r\n        };\r\n\r\n        $scope.onClick = function (node) {\r\n            if (angular.isDefined($scope.tree) && angular.isFunction($scope.tree.on_click)) {\r\n                // We want to detach from Angular's digest cycle so we can\r\n                // independently measure the time for one cycle.\r\n                setTimeout(\r\n                    function () {\r\n                        $scope.tree.on_click(node);\r\n                    }, 0\r\n                );\r\n            }\r\n        };\r\n\r\n        $scope.onSelect = function (node) {\r\n            if (angular.isDefined($scope.tree)) {\r\n                if (node !== $scope.tree.selected_node) {\r\n                    $scope.tree.select_node(node);\r\n                }\r\n\r\n                if (angular.isFunction($scope.tree.on_select)) {\r\n                    setTimeout(\r\n                        function () {\r\n                            $scope.tree.on_select(node);\r\n                        }, 0\r\n                    );\r\n                }\r\n            }\r\n        };\r\n\r\n        var passedExpand, _clone;\r\n        $scope.toggleExpand = function (node, fnCallback) {\r\n            passedExpand = true;\r\n            if (angular.isFunction(fnCallback) && !fnCallback(node)) {\r\n                passedExpand = false;\r\n            } else if (angular.isFunction($scope.$callbacks.expand) && !$scope.$callbacks.expand(node)) {\r\n                passedExpand = false;\r\n            }\r\n\r\n            if (passedExpand) {\r\n                if (node.__children__.length > 0) {\r\n                    node.__expanded__ = !node.__expanded__;\r\n                }\r\n            }\r\n        };\r\n\r\n        $scope.getHash = function (node) {\r\n            if ($scope.primary_key === '__uid__') {\r\n                return '#' + node.__parent__ + '#' + node.__uid__ + '#' + node.__index__;\r\n            } else {\r\n                return '#' + node.__parent__ + '#' + node[$scope.primary_key] + '#' + node.__index__;\r\n            }\r\n        };\r\n\r\n        $scope.$callbacks = {\r\n            for_all_descendants: $scope.for_all_descendants,\r\n            /*expand:              function (node) {\r\n             return true;\r\n             },*/\r\n            accept:              function (dragInfo, moveTo, isChanged) {\r\n                return $scope.dropEnabled === true;\r\n            },\r\n            calsIndent:          function (level, skipUnit, skipEdge) {\r\n                var unit = 0,\r\n                    edge = skipEdge ? 0 : $scope.indent_plus;\r\n                if (!skipUnit) {\r\n                    unit = $scope.indent_unit ? $scope.indent_unit : 'px';\r\n                }\r\n\r\n                if (level - 1 < 1) {\r\n                    return edge + unit;\r\n                } else {\r\n                    return $scope.indent * (level - 1) + edge + unit;\r\n                }\r\n            },\r\n            droppable:           function () {\r\n                return $scope.dropEnabled === true;\r\n            },\r\n            draggable:           function () {\r\n                return $scope.dragEnabled === true;\r\n            },\r\n            beforeDrop:          function (event) {\r\n                return true;\r\n            },\r\n            changeKey:           function (node) {\r\n                var _key     = node.__uid__;\r\n                node.__uid__ = Math.random();\r\n                if (node.__selected__) {\r\n                    delete node.__selected__;\r\n                }\r\n\r\n                if ($scope.primary_key !== '__uid__') {\r\n                    _key = '' + node[$scope.primary_key];\r\n                    _key = _key.replace(/_#.+$/g, '') + '_#' + node.__uid__;\r\n\r\n                    node[$scope.primary_key] = _key;\r\n                }\r\n                // delete(node.__hashKey__);\r\n            },\r\n            clone:               function (node, _this) {\r\n                _clone = angular.copy(node);\r\n                this.for_all_descendants(_clone, this.changeKey);\r\n                return _clone;\r\n            },\r\n            remove:              function (node, parent, _this) {\r\n                var temp = parent.splice(node.__index__, 1)[0];\r\n                $scope.reload_data();\r\n                return temp;\r\n            },\r\n            add:                 function (node, pos, parent, _this) {\r\n                if (parent) {\r\n                    if (parent.length > -1) {\r\n                        if (pos > -1) {\r\n                            parent.splice(pos, 0, node);\r\n                        } else {\r\n                            // todo If children need load crazy\r\n                            parent.push(node);\r\n                        }\r\n                    } else {\r\n                        parent.push(node);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        $scope.setScope = function (scope, node) {\r\n            var _hash = $scope.getHash(node);\r\n\r\n            if ($scope.$globals[_hash] !== scope) {\r\n                //console.log(node, $scope.$globals);\r\n                $scope.$globals[_hash] = scope;\r\n            }\r\n        };\r\n\r\n        $scope.getScope = function (node) {\r\n\r\n            //console.log(node, $scope.$globals);\r\n            if (node) {\r\n                var _hash = $scope.getHash(node);\r\n                return $scope.$globals[_hash];\r\n            }\r\n            return $scope;\r\n        };\r\n\r\n        if ($attrs.enableDrag || $attrs.enableDrop) {\r\n            $scope.placeElm = null;\r\n            //                            $scope.dragBorder = 30;\r\n            $scope.dragEnabled = null;\r\n            $scope.dropEnabled = null;\r\n            $scope.horizontal  = null;\r\n\r\n            if ($attrs.enableDrag) {\r\n\r\n                $scope.dragDelay       = 0;\r\n                $scope.enabledMove     = true;\r\n                $scope.statusMove      = true;\r\n                $scope.enabledHotkey   = false;\r\n                $scope.enabledCollapse = null;\r\n                $scope.statusElm       = null;\r\n                $scope.dragging        = null;\r\n\r\n                angular.extend(\r\n                    $scope.$callbacks, {\r\n                        beforeDrag: function (scopeDrag) {\r\n                            return true;\r\n                        },\r\n                        dragStop:   function (event, skiped) {\r\n\r\n                            if (!event || !event.changed || !skiped) {\r\n                                return null;\r\n                            }\r\n\r\n                            event.target.reload_data();\r\n                            if (event.target !== event.drag && event.drag.enable) {\r\n                                event.drag.reload_data();\r\n                            }\r\n                        },\r\n                        dropped:    function (info, pass) {\r\n                            if (!info) {\r\n                                return null;\r\n                            }\r\n\r\n                            var _node         = info.node,\r\n                                _nodeAdd      = null,\r\n                                _move         = info.move,\r\n                                _parent       = null,\r\n                                _parentRemove = info.parent || info.drag.treeData,\r\n                                _parentAdd    = _move.parent || info.target.treeData,\r\n                                isMove        = info.drag.enabledMove;\r\n\r\n                            if (!info.changed && isMove) {\r\n                                return false;\r\n                            }\r\n\r\n                            if (info.target.$callbacks.accept(info, info.move, info.changed)) {\r\n                                if (isMove) {\r\n                                    _parent = _parentRemove;\r\n                                    if (angular.isDefined(_parent.__children__)) {\r\n                                        _parent = _parent.__children__;\r\n                                    }\r\n\r\n                                    _nodeAdd = info.drag.$callbacks.remove(\r\n                                        _node,\r\n                                        _parent,\r\n                                        info.drag.$callbacks\r\n                                    );\r\n                                } else {\r\n                                    _nodeAdd = info.drag.$callbacks.clone(_node, info.drag.$callbacks);\r\n                                }\r\n\r\n                                // if node dragging change index in sample node parent\r\n                                // and index node decrement\r\n                                if (isMove &&\r\n                                    info.drag === info.target &&\r\n                                    _parentRemove === _parentAdd &&\r\n                                    _move.pos >= info.node.__index__) {\r\n                                    _move.pos--;\r\n                                }\r\n\r\n                                _parent = _parentAdd;\r\n                                if (_parent.__children__) {\r\n                                    _parent = _parent.__children__;\r\n                                }\r\n\r\n                                info.target.$callbacks.add(\r\n                                    _nodeAdd,\r\n                                    _move.pos,\r\n                                    _parent,\r\n                                    info.drag.$callbacks\r\n                                );\r\n\r\n                                return true;\r\n                            }\r\n\r\n                            return false;\r\n                        },\r\n                        dragStart:  function (event) {\r\n                        },\r\n                        dragMove:   function (event) {\r\n                        }\r\n                    }\r\n                );\r\n\r\n                $scope.setDragging = function (dragInfo) {\r\n                    $scope.dragging = dragInfo;\r\n                };\r\n\r\n                $scope.enableMove = function (val) {\r\n                    if (typeof val === 'boolean') {\r\n                        $scope.enabledMove = val;\r\n                    } else {\r\n                        $scope.enabledMove = true;\r\n                    }\r\n                };\r\n\r\n                if ($attrs.enableStatus) {\r\n                    $scope.enabledStatus = false;\r\n\r\n                    $scope.hideStatus = function () {\r\n                        if ($scope.statusElm) {\r\n                            $scope.statusElm.addClass($scope.$class.hidden);\r\n                        }\r\n                    };\r\n\r\n                    $scope.refreshStatus = function () {\r\n                        if (!$scope.dragging) {\r\n                            return;\r\n                        }\r\n\r\n                        if ($scope.enabledStatus) {\r\n                            var statusElmOld = $scope.statusElm;\r\n                            if ($scope.enabledMove) {\r\n                                $scope.statusElm = angular.element($TreeDnDTemplate.getMove($scope));\r\n                            } else {\r\n                                $scope.statusElm = angular.element($TreeDnDTemplate.getCopy($scope));\r\n                            }\r\n\r\n                            if (statusElmOld !== $scope.statusElm) {\r\n                                if (statusElmOld) {\r\n                                    $scope.statusElm.attr('class', statusElmOld.attr('class'));\r\n                                    $scope.statusElm.attr('style', statusElmOld.attr('style'));\r\n                                    statusElmOld.remove();\r\n                                }\r\n                                $document.find('body').append($scope.statusElm);\r\n\r\n                            }\r\n\r\n                            $scope.statusElm.removeClass($scope.$class.hidden);\r\n                        }\r\n                    };\r\n\r\n                    $scope.setPositionStatus = function (e) {\r\n                        if ($scope.statusElm) {\r\n                            $scope.statusElm.css(\r\n                                {\r\n                                    'left':    e.pageX + 10 + 'px',\r\n                                    'top':     e.pageY + 15 + 'px',\r\n                                    'z-index': 9999\r\n                                }\r\n                            );\r\n                            $scope.statusElm.addClass($scope.$class.status);\r\n                        }\r\n                    };\r\n                }\r\n            }\r\n\r\n            $scope.targeting = false;\r\n\r\n            $scope.getPrevSibling = function (node) {\r\n                if (node && node.__index__ > 0) {\r\n                    var _parent, _index = node.__index__ - 1;\r\n\r\n                    if (angular.isDefined(node.__parent_real__)) {\r\n                        _parent = $scope.tree_nodes[node.__parent_real__];\r\n                        return _parent.__children__[_index];\r\n                    }\r\n                    return $scope.treeData[_index];\r\n\r\n                }\r\n                return null;\r\n            };\r\n\r\n            $scope.getNode = function (index) {\r\n                if (angular.isUndefinedOrNull(index)) {\r\n                    return null;\r\n                }\r\n                return $scope.tree_nodes[index];\r\n            };\r\n\r\n            $scope.initPlace = function (element, dragElm) {\r\n\r\n                if (!$scope.placeElm) {\r\n                    if ($scope.isTable) {\r\n                        $scope.placeElm = angular.element($window.document.createElement('tr'));\r\n                        var _len_down   = $scope.colDefinitions.length;\r\n                        $scope.placeElm.append(\r\n                            angular.element($window.document.createElement('td'))\r\n                                .addClass($scope.$class.empty)\r\n                                .addClass('indented')\r\n                                .addClass($scope.$class.place)\r\n                        );\r\n                        while (_len_down-- > 0) {\r\n                            $scope.placeElm.append(\r\n                                angular.element($window.document.createElement('td'))\r\n                                    .addClass($scope.$class.empty)\r\n                                    .addClass($scope.$class.place)\r\n                            );\r\n                        }\r\n                    } else {\r\n                        $scope.placeElm = angular.element($window.document.createElement('li'))\r\n                            .addClass($scope.$class.empty)\r\n                            .addClass($scope.$class.place);\r\n                    }\r\n\r\n                }\r\n\r\n                if (dragElm) {\r\n                    $scope.placeElm.css('height', $TreeDnDHelper.height(dragElm) + 'px');\r\n                }\r\n\r\n                if (element) {\r\n                    element[0].parentNode.insertBefore($scope.placeElm[0], element[0]);\r\n                } else {\r\n                    $scope.getElementChilds().append($scope.placeElm);\r\n                }\r\n\r\n                return $scope.placeElm;\r\n            };\r\n\r\n            $scope.hidePlace = function () {\r\n                if ($scope.placeElm) {\r\n                    $scope.placeElm.addClass($scope.$class.hidden);\r\n                }\r\n            };\r\n\r\n            $scope.showPlace = function () {\r\n                if ($scope.placeElm) {\r\n                    $scope.placeElm.removeClass($scope.$class.hidden);\r\n                }\r\n            };\r\n\r\n            $scope.getScopeTree = function () {\r\n                return $scope;\r\n            };\r\n\r\n        }\r\n\r\n        $scope.$safeApply = $safeApply;\r\n\r\n        var _fnInitFilter,\r\n            _fnInitOrderBy,\r\n            _fnGetControl,\r\n            _defaultFilterOption = {\r\n                showParent: true,\r\n                showChild:  false,\r\n                beginAnd:   true\r\n            },\r\n            tree,\r\n            _watches             = [\r\n                [\r\n                    'enableDrag', [\r\n                    ['boolean', 'enableStatus', null, 'enabledStatus'],\r\n                    ['boolean', 'enableMove', null, 'enabledMove'],\r\n                    ['number', 'dragDelay', 0, null, 0],\r\n                    ['boolean', 'enableCollapse', null, 'enabledCollapse'],\r\n                    [\r\n                        'boolean', 'enableHotkey', null, 'enabledHotkey', null, function (isHotkey) {\r\n                        if (isHotkey) {\r\n                            $scope.enabledMove = false;\r\n                        } else {\r\n                            $scope.enabledMove = $scope.statusMove;\r\n                        }\r\n                    }]\r\n                ]],\r\n                [\r\n                    ['enableDrag', 'enableStatus'], [\r\n                    [\r\n                        'string', 'templateCopy', $attrs.templateCopy, 'templateCopy', null,\r\n                        function (_url) {\r\n                            if (_url && $templateCache.get(_url)) {\r\n                                $TreeDnDTemplate.setCopy(_url, $scope);\r\n                            }\r\n                        }],\r\n                    [\r\n                        'string', 'templateMove', $attrs.templateMove, 'templateMove', null,\r\n                        function (_url) {\r\n                            if (_url && $templateCache.get(_url)) {\r\n                                $TreeDnDTemplate.setMove(_url, $scope);\r\n                            }\r\n                        }]\r\n                ]],\r\n                [\r\n                    [['enableDrag', 'enableDrop']], [\r\n                    ['number', 'dragBorder', 30, 'dragBorder', 30]]\r\n                ],\r\n                [\r\n                    '*', [\r\n                    ['boolean', 'treeTable', true, 'treeTable', null],\r\n                    ['boolean', 'horizontal'],\r\n                    [\r\n                        'callback', 'treeClass', function (val) {\r\n                        switch (typeof val) {\r\n                            case 'string':\r\n                                $scope.$tree_class = val;\r\n                                break;\r\n                            case 'object':\r\n                                angular.extend($scope.$class, val);\r\n                                $scope.$tree_class = $scope.$class.tree;\r\n                                break;\r\n                            default:\r\n                                $scope.$tree_class = $attrs.treeClass;\r\n                                break;\r\n                        }\r\n                    }, 'treeClass', function () {\r\n                        $scope.$tree_class = $scope.$class.tree + ' table';\r\n                    }, null, function () {\r\n                        if (/^(\\s+[\\w\\-]+){2,}$/g.test(' ' + $attrs.treeClass)) {\r\n                            $scope.$tree_class = $attrs.treeClass.trim();\r\n                            return true;\r\n                        }\r\n                    }],\r\n                    [\r\n                        ['object', 'string'], 'expandOn', getExpandOn, 'expandingProperty', getExpandOn,\r\n                        function (expandOn) {\r\n                            if (angular.isUndefinedOrNull(expandOn)) {\r\n                                $scope.expandingProperty = $attrs.expandOn;\r\n                            }\r\n                        }],\r\n                    [\r\n                        'object', 'treeControl', angular.isDefined($scope.tree) ? $scope.tree : {},\r\n                        'tree', null, function ($tree) {\r\n\r\n                        if (!angular.isFunction(_fnGetControl)) {\r\n                            _fnGetControl = $TreeDnDPlugin('$TreeDnDControl');\r\n                        }\r\n\r\n                        if (angular.isFunction(_fnGetControl)) {\r\n                            tree = angular.extend(\r\n                                $tree,\r\n                                _fnGetControl($scope)\r\n                            );\r\n                        }\r\n                    }],\r\n                    [\r\n                        ['array', 'object'], 'columnDefs', getColDefs, 'colDefinitions', getColDefs,\r\n                        function (colDefs) {\r\n                            if (angular.isUndefinedOrNull(colDefs) || !angular.isArray(colDefs)) {\r\n                                $scope.colDefinitions = getColDefs();\r\n                            }\r\n                        }],\r\n                    [['object', 'string', 'array', 'function'], 'orderBy', $attrs.orderBy],\r\n                    [\r\n                        ['object', 'array'], 'filter', null, 'filter', null, function (filters) {\r\n                        var _passed = false;\r\n                        if (angular.isDefined(filters) && !angular.isArray(filters)) {\r\n                            var _keysF = Object.keys(filters),\r\n                                _lenF  = _keysF.length, _iF;\r\n\r\n                            if (_lenF > 0) {\r\n                                for (_iF = 0; _iF < _lenF; _iF++) {\r\n\r\n                                    if (typeof filters[_keysF[_iF]] === 'string' &&\r\n                                        filters[_keysF[_iF]].length === 0) {\r\n                                        continue;\r\n                                    }\r\n                                    _passed = true;\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        $scope.enabledFilter = _passed;\r\n                        reload_data();\r\n                    }],\r\n                    [\r\n                        'object', 'filterOptions', _defaultFilterOption, 'filterOptions',\r\n                        _defaultFilterOption, function (option) {\r\n                        if (typeof option === 'object') {\r\n                            $scope.filterOptions = angular.extend(_defaultFilterOption, option);\r\n                        }\r\n                    }],\r\n                    ['string', 'primaryKey', $attrs.primaryKey, 'primary_key', '__uid__'],\r\n                    ['string', 'indentUnit', $attrs.indentUnit, 'indent_unit'],\r\n                    ['number', 'indent', 30, null, 30],\r\n                    ['number', 'indentPlus', 20, null, 20],\r\n                    [\r\n                        'null', 'callbacks',\r\n                        function (optCallbacks) {\r\n                            angular.forEach(\r\n                                optCallbacks, function (value, key) {\r\n                                    if (typeof value === 'function') {\r\n                                        if ($scope.$callbacks[key]) {\r\n                                            $scope.$callbacks[key] = value;\r\n                                        }\r\n                                    }\r\n                                }\r\n                            );\r\n                            return $scope.$callbacks;\r\n                        },\r\n                        '$callbacks'\r\n                    ],\r\n                    [\r\n                        'number', 'expandLevel', 3, 'expandLevel', 3, function () {\r\n                        reload_data();\r\n                    }],\r\n                    ['number', 'treeLimit', 100, '$TreeLimit', 100],\r\n                    ['boolean', 'enableDrag', null, 'dragEnabled'],\r\n                    ['boolean', 'enableDrop', null, 'dropEnabled']\r\n                ]]\r\n            ],\r\n            w, lenW              = _watches.length,\r\n            i, len,\r\n            _curW,\r\n            _typeW, _nameW, _defaultW, _scopeW, _NotW, _AfterW, _BeforeW,\r\n\r\n            // debounce reload_Data;\r\n            timeReloadData, tmpTreeData;\r\n\r\n        for (w = 0; w < lenW; w++) {\r\n            // skip if not exist\r\n            if (!check_exist_attr($attrs, _watches[w][0], true)) {\r\n                continue;\r\n            }\r\n            _curW = _watches[w][1];\r\n            for (i = 0, len = _curW.length; i < len; i++) {\r\n                _typeW    = _curW[i][0];\r\n                _nameW    = _curW[i][1];\r\n                _defaultW = _curW[i][2];\r\n                _scopeW   = _curW[i][3];\r\n                _NotW     = _curW[i][4];\r\n                _AfterW   = _curW[i][5];\r\n                _BeforeW  = _curW[i][6];\r\n                generateWatch(_typeW, _nameW, _defaultW, _scopeW, _NotW, _AfterW, _BeforeW);\r\n            }\r\n        }\r\n\r\n        if ($attrs.treeData) {\r\n            $scope.$watch(\r\n                $attrs.treeData, function (val) {\r\n                    if (angular.equals(val, $scope.treeData)) {\r\n                        return;\r\n                    }\r\n\r\n                    tmpTreeData = val;\r\n                    if (angular.isUndefinedOrNull(timeReloadData)) {\r\n                        timeReloadData = $timeout(timeLoadData, 350);\r\n                    }\r\n                }, true\r\n            );\r\n        }\r\n\r\n        function timeLoadData() {\r\n            $scope.treeData = tmpTreeData;\r\n            reload_data();\r\n            timeReloadData  = null;\r\n        }\r\n\r\n        $scope.updateLimit = function updateLimit() {\r\n            //console.log('Call fn UpdateLimit');\r\n            $scope.$TreeLimit += 50;\r\n        };\r\n\r\n        $scope.reload_data = reload_data;\r\n\r\n        function check_exist_attr(attrs, existAttr, isAnd) {\r\n            if (angular.isUndefinedOrNull(existAttr)) {\r\n                return false;\r\n            }\r\n\r\n            if (existAttr === '*' || !angular.isUndefined(attrs[existAttr])) {\r\n                return true;\r\n            }\r\n\r\n            if (angular.isArray(existAttr)) {\r\n                return for_each_attrs(attrs, existAttr, isAnd);\r\n            }\r\n        }\r\n\r\n        function for_each_attrs(attrs, exist, isAnd) {\r\n            var i, len = exist.length, passed = false;\r\n\r\n            if (len === 0) {\r\n                return null;\r\n            }\r\n            for (i = 0; i < len; i++) {\r\n                if (check_exist_attr(attrs, exist[i], !isAnd)) {\r\n                    passed = true;\r\n                    if (!isAnd) {\r\n                        return true;\r\n                    }\r\n                } else {\r\n                    if (isAnd) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return passed;\r\n        }\r\n\r\n        function generateWatch(type, nameAttr, valDefault, nameScope, fnNotExist, fnAfter,\r\n                               fnBefore\r\n        ) {\r\n            nameScope = nameScope || nameAttr;\r\n            if (typeof type === 'string' || angular.isArray(type)) {\r\n                if (angular.isFunction(fnBefore) && fnBefore()) {\r\n                    return;//jmp\r\n                }\r\n                if (typeof $attrs[nameAttr] === 'string') {\r\n                    $scope.$watch(\r\n                        $attrs[nameAttr], function (val) {\r\n                            if (typeof type === 'string' && typeof val === type ||\r\n                                angular.isArray(type) && type.indexOf(typeof val) > -1\r\n                            ) {\r\n                                $scope[nameScope] = val;\r\n                            } else {\r\n                                if (angular.isFunction(valDefault)) {\r\n                                    $scope[nameScope] = valDefault(val);\r\n                                } else {\r\n                                    $scope[nameScope] = valDefault;\r\n                                }\r\n                            }\r\n\r\n                            if (angular.isFunction(fnAfter)) {\r\n                                fnAfter($scope[nameScope], $scope);\r\n                            }\r\n                        }, true\r\n                    );\r\n                } else {\r\n\r\n                    if (angular.isFunction(fnNotExist)) {\r\n                        $scope[nameScope] = fnNotExist();\r\n                    } else if (!angular.isUndefined(fnNotExist)) {\r\n                        $scope[nameScope] = fnNotExist;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function $safeApply(fn) {\r\n            var phase = this.$root.$$phase;\r\n            if (phase === '$apply' || phase === '$digest') {\r\n                if (fn && typeof fn === 'function') {\r\n                    fn();\r\n                }\r\n            } else {\r\n                this.$apply(fn);\r\n            }\r\n        }\r\n\r\n        function getExpandOn() {\r\n            if ($scope.treeData && $scope.treeData.length) {\r\n                var _firstNode = $scope.treeData[0], _keys = Object.keys(_firstNode),\r\n                    _regex     = new RegExp('^__([a-zA-Z0-9_\\-]*)__$'),\r\n                    _len,\r\n                    i;\r\n                // Auto get first field with type is string;\r\n                for (i = 0, _len = _keys.length; i < _len; i++) {\r\n                    if (typeof _firstNode[_keys[i]] === 'string' && !_regex.test(_keys[i])) {\r\n                        $scope.expandingProperty = _keys[i];\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                // Auto get first\r\n                if (angular.isUndefinedOrNull($scope.expandingProperty)) {\r\n                    $scope.expandingProperty = _keys[0];\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        function getColDefs() {\r\n            // Auto get Defs except attribute __level__ ....\r\n            if ($scope.treeData.length) {\r\n                var _col_defs = [], _firstNode = $scope.treeData[0],\r\n                    _regex    = new RegExp('(^__([a-zA-Z0-9_\\-]*)__$|^' + $scope.expandingProperty + '$)'),\r\n                    _keys     = Object.keys(_firstNode),\r\n                    i, _len;\r\n                // Auto get first field with type is string;\r\n                for (i = 0, _len = _keys.length; i < _len; i++) {\r\n                    if (typeof _firstNode[_keys[i]] === 'string' && !_regex.test(_keys[i])) {\r\n                        _col_defs.push(\r\n                            {\r\n                                field: _keys[i]\r\n                            }\r\n                        );\r\n                    }\r\n                }\r\n                $scope.colDefinitions = _col_defs;\r\n            }\r\n        }\r\n\r\n        function do_f(root, node, parent, parent_real, level, visible, index) {\r\n            var _i, _len, _icon, _index_real, _dept, _hashKey;\r\n            if (!angular.isArray(node.__children__)) {\r\n                node.__children__ = [];\r\n            }\r\n\r\n            node.__parent_real__ = parent_real;\r\n            node.__parent__      = parent;\r\n            _len                 = node.__children__.length;\r\n\r\n            if (angular.isUndefinedOrNull(node.__expanded__) && _len > 0) {\r\n                node.__expanded__ = level < $scope.expandLevel;\r\n            }\r\n\r\n            if (_len === 0) {\r\n                _icon = -1;\r\n            } else {\r\n                if (node.__expanded__) {\r\n                    _icon = 1;\r\n                } else {\r\n                    _icon = 0;\r\n                }\r\n            }\r\n\r\n            // Insert item vertically\r\n            _index_real         = root.length;\r\n            node.__index__      = index;\r\n            node.__index_real__ = _index_real;\r\n            node.__level__      = level;\r\n            node.__icon__       = _icon;\r\n            node.__icon_class__ = $scope.$class.icon[_icon];\r\n            node.__visible__    = !!visible;\r\n\r\n            if (angular.isUndefinedOrNull(node.__uid__)) {\r\n                node.__uid__ = '' + Math.random();\r\n            }\r\n\r\n            root.push(node);\r\n\r\n            // Check node children\r\n            _dept = 1;\r\n            if (_len > 0) {\r\n                for (_i = 0; _i < _len; _i++) {\r\n                    _dept += do_f(\r\n                        root,\r\n                        node.__children__[_i],\r\n                        $scope.primary_key === '__uid__' ? node.__uid__ : node[$scope.primary_key],\r\n                        _index_real,\r\n                        level + 1,\r\n                        visible && node.__expanded__,\r\n                        _i\r\n                    );\r\n                }\r\n            }\r\n\r\n            _hashKey = $scope.getHash(node);\r\n\r\n            if (angular.isUndefinedOrNull(node.__hashKey__) || node.__hashKey__ !== _hashKey) {\r\n                node.__hashKey__ = _hashKey;\r\n                // delete($scope.$globals[_hashKey]);\r\n            }\r\n\r\n            node.__dept__ = _dept;\r\n\r\n            return _dept;\r\n        }\r\n\r\n        function reload_data(oData) {\r\n            console.time('Reload_Data');\r\n\r\n            var _data,\r\n                _len,\r\n                _tree_nodes = [];\r\n            if (angular.isDefined(oData)) {\r\n                if (!angular.isArray(oData) || oData.length === 0) {\r\n                    return [];\r\n                } else {\r\n                    _data = oData;\r\n                }\r\n            } else if (!angular.isArray($scope.treeData) || $scope.treeData.length === 0) {\r\n                return [];\r\n            } else {\r\n                _data = $scope.treeData;\r\n            }\r\n\r\n            if (!$attrs.expandOn) {\r\n                getExpandOn();\r\n            }\r\n\r\n            if (!$attrs.columnDefs) {\r\n                getColDefs();\r\n            }\r\n\r\n            if (angular.isDefined($scope.orderBy)) {\r\n                if (!angular.isFunction(_fnInitOrderBy)) {\r\n                    _fnInitOrderBy = $TreeDnDPlugin('$TreeDnDOrderBy');\r\n                }\r\n\r\n                if (angular.isFunction(_fnInitOrderBy)) {\r\n                    _data = _fnInitOrderBy(_data, $scope.orderBy);\r\n                }\r\n            }\r\n\r\n            if (angular.isDefined($scope.filter)) {\r\n                if (!angular.isFunction(_fnInitFilter)) {\r\n                    _fnInitFilter = $TreeDnDPlugin('$TreeDnDFilter');\r\n                }\r\n\r\n                if (angular.isFunction(_fnInitFilter)) {\r\n                    _data = _fnInitFilter(_data, $scope.filter, $scope.filterOptions);\r\n                }\r\n            }\r\n\r\n            _len = _data.length;\r\n            if (_len > 0) {\r\n                var _i,\r\n                    _offset, _max, _min, _keys,\r\n                    _deptTotal = 0;\r\n\r\n                for (_i = 0; _i < _len; _i++) {\r\n                    _deptTotal += do_f(_tree_nodes, _data[_i], null, null, 1, true, _i);\r\n                }\r\n\r\n                // clear Element Empty\r\n                _keys   = Object.keys($scope.$globals);\r\n                _len    = $scope.$globals.length;\r\n                _offset = _len - _deptTotal;\r\n\r\n                if (_offset !== 0) {\r\n                    _max = _len - _offset;\r\n                    _min = _max - Math.abs(_offset);\r\n                    for (_i = _min; _i < _max; _i++) {\r\n                        delete $scope.$globals[_keys[_i]];\r\n                    }\r\n                }\r\n            }\r\n\r\n            // clear memory\r\n            if (angular.isDefined($scope.tree_nodes)) {\r\n                delete $scope.tree_nodes;\r\n            }\r\n\r\n            $scope.tree_nodes = _tree_nodes;\r\n\r\n            console.timeEnd('Reload_Data');\r\n            return _tree_nodes;\r\n        }\r\n    }\r\n\r\n    function fnCompile(tElement) {\r\n\r\n        var $_Template = '',\r\n            _element   = tElement.html().trim();\r\n\r\n        if (_element.length > 0) {\r\n            $_Template = _element;\r\n            tElement.html('');\r\n        }\r\n\r\n        return function fnPost(scope, element, attrs) {\r\n\r\n            if (attrs.enableDrag) {\r\n                var _fnInitDrag = $TreeDnDPlugin('$TreeDnDDrag');\r\n                if (angular.isFunction(_fnInitDrag)) {\r\n                    _fnInitDrag(scope, element, $window, $document);\r\n                }\r\n            }\r\n\r\n            // kick out $digest\r\n            element.ready(function () {\r\n                // apply Template\r\n                function checkTreeTable(template, scope) {\r\n                    var elemNode = template[0].querySelector('[tree-dnd-node]'),\r\n                        attrInclude;\r\n\r\n                    scope.isTable = null;\r\n                    if (elemNode) {\r\n                        elemNode    = angular.element(elemNode);\r\n                        attrInclude = elemNode.attr('ng-include');\r\n                    } else {\r\n                        return;\r\n                    }\r\n\r\n                    if (attrInclude) {\r\n                        var treeInclude = $parse(attrInclude)(scope) || attrInclude;\r\n                        if (typeof treeInclude === 'string') {\r\n                            return $http.get(\r\n                                treeInclude,\r\n                                {cache: $templateCache}\r\n                            ).success(\r\n                                function (data) {\r\n                                    data = data.trim();\r\n                                    //scope.templateNode = data;\r\n                                    var tempDiv       = document.createElement('div');\r\n                                    tempDiv.innerHTML = data;\r\n                                    tempDiv           = angular.element(tempDiv);\r\n                                    scope.isTable     = !tempDiv[0].querySelector('[tree-dnd-nodes]');\r\n                                }\r\n                            );\r\n                        }\r\n                    } else {\r\n                        scope.isTable = !elemNode[0].querySelector('[tree-dnd-nodes]');\r\n                        //scope.templateNode = elemNode.html();\r\n                    }\r\n                    $TreeDnDViewport.setTemplate(scope, scope.templateNode);\r\n                    //elemNode.html('');\r\n                }\r\n\r\n                //scope.$watch(tableDataLoaded, transformTable);\r\n                /*\r\n                 function tableDataLoaded(elem) {\r\n                 // first cell in the tbody exists when data is loaded but doesn't have a width\r\n                 // until after the table is transformed\r\n                 var firstCell = elem.querySelector('tbody tr:first-child td:first-child');\r\n                 return firstCell && !firstCell.style.width;\r\n                 }\r\n\r\n                 function transformTable(elem, attrs) {\r\n                 // reset display styles so column widths are correct when measured below\r\n                 angular.element(elem.querySelectorAll('thead, tbody, tfoot')).css('display', '');\r\n\r\n                 // wrap in $timeout to give table a chance to finish rendering\r\n                 $timeout(function () {\r\n                 // set widths of columns\r\n                 angular.forEach(elem.querySelectorAll('tr:first-child th'), function (thElem, i) {\r\n\r\n                 var tdElems = elem.querySelector('tbody tr:first-child td:nth-child(' + (i + 1) + ')');\r\n                 var tfElems = elem.querySelector('tfoot tr:first-child td:nth-child(' + (i + 1) + ')');\r\n\r\n                 var columnWidth = tdElems ? tdElems.offsetWidth : thElem.offsetWidth;\r\n                 if (tdElems) {\r\n                 tdElems.style.width = columnWidth + 'px';\r\n                 }\r\n                 if (thElem) {\r\n                 thElem.style.width = columnWidth + 'px';\r\n                 }\r\n                 if (tfElems) {\r\n                 tfElems.style.width = columnWidth + 'px';\r\n                 }\r\n                 });\r\n\r\n                 // set css styles on thead and tbody\r\n                 angular.element(elem.querySelectorAll('thead, tfoot')).css('display', 'block');\r\n\r\n                 angular.element(elem.querySelectorAll('tbody')).css({\r\n                 'display':  'block',\r\n                 'height':   attrs.tableHeight || 'inherit',\r\n                 'overflow': 'auto'\r\n                 });\r\n\r\n                 // reduce width of last column by width of scrollbar\r\n                 var tbody          = elem.querySelector('tbody');\r\n                 var scrollBarWidth = tbody.offsetWidth - tbody.clientWidth;\r\n                 if (scrollBarWidth > 0) {\r\n                 // for some reason trimming the width by 2px lines everything up better\r\n                 scrollBarWidth -= 2;\r\n                 var lastColumn         = elem.querySelector('tbody tr:first-child td:last-child');\r\n                 lastColumn.style.width = lastColumn.offsetWidth - scrollBarWidth + 'px';\r\n                 }\r\n                 });\r\n                 }*/\r\n                var promiseCheck;\r\n                if ($_Template.length > 0) {\r\n                    promiseCheck = checkTreeTable(angular.element($_Template.trim()), scope);\r\n                    if (typeof promiseCheck === 'object') {\r\n                        promiseCheck.then(function () {\r\n                            element.append($compile($_Template)(scope));\r\n                        });\r\n                    } else {\r\n                        element.append($compile($_Template)(scope));\r\n                    }\r\n                } else {\r\n                    $http.get(\r\n                        attrs.templateUrl || $TreeDnDTemplate.getPath(),\r\n                        {cache: $templateCache}\r\n                    ).success(\r\n                        function (data) {\r\n                            data         = angular.element(data.trim());\r\n                            promiseCheck = checkTreeTable(data, scope);\r\n                            if (typeof promiseCheck === 'object') {\r\n                                promiseCheck.then(function () {\r\n                                    element.append($compile(data)(scope));\r\n                                });\r\n                            } else {\r\n                                element.append($compile(data)(scope));\r\n                            }\r\n                        }\r\n                    );\r\n                }\r\n            })\r\n        };\r\n    }\r\n}\r\n\n\nangular.module('ntt.TreeDnD')\r\n    .factory(\r\n    '$TreeDnDConvert', function () {\r\n        var _$initConvert = {\r\n            line2tree: function (data, primaryKey, parentKey) {\r\n                if (!data || data.length === 0 || !primaryKey || !parentKey) {\r\n                    return [];\r\n                }\r\n                var tree = [],\r\n                    rootIds = [],\r\n                    item = data[0],\r\n                    _primary = item[primaryKey],\r\n                    treeObjs = {},\r\n                    parentId, parent,\r\n                    len = data.length,\r\n                    i = 0;\r\n                while (i < len) {\r\n                    item = data[i++];\r\n                    _primary = item[primaryKey];\r\n                    treeObjs[_primary] = item;\r\n                    parentId = item[parentKey];\r\n                    if (parentId) {\r\n                        parent = treeObjs[parentId];\r\n                        if (parent.__children__) {\r\n                            parent.__children__.push(item);\r\n                        } else {\r\n                            parent.__children__ = [item];\r\n                        }\r\n                    } else {\r\n                        rootIds.push(_primary);\r\n                    }\r\n                }\r\n                len = rootIds.length;\r\n                for (i = 0; i < len; i++) {\r\n                    tree.push(treeObjs[rootIds[i]]);\r\n                }\r\n                return tree;\r\n            },\r\n            tree2tree: function access_child(data, containKey) {\r\n                var _tree = [],\r\n                    _i,\r\n                    _len = data ? data.length : 0,\r\n                    _copy, _child;\r\n                for (_i = 0; _i < _len; _i++) {\r\n                    _copy = angular.copy(data[_i]);\r\n                    if (angular.isArray(_copy[containKey]) && _copy[containKey].length > 0) {\r\n                        _child = access_child(_copy[containKey], containKey);\r\n                            delete _copy[containKey];\r\n                        _copy.__children__ = _child;\r\n                    }\r\n                    _tree.push(_copy);\r\n                }\r\n                return _tree;\r\n            }\r\n        };\r\n\r\n        return _$initConvert;\r\n    }\r\n);\n\nangular.module('ntt.TreeDnD')\r\n    .factory(\r\n    '$TreeDnDHelper', [\r\n        '$document', '$window', function ($document, $window) {\r\n            var _$helper = {\r\n                nodrag:          function (targetElm) {\r\n                    return typeof targetElm.attr('data-nodrag') !== 'undefined';\r\n                },\r\n                eventObj:        function (e) {\r\n                    var obj = e;\r\n                    if (e.targetTouches !== undefined) {\r\n                        obj = e.targetTouches.item(0);\r\n                    } else if (e.originalEvent !== undefined && e.originalEvent.targetTouches !== undefined) {\r\n                        obj = e.originalEvent.targetTouches.item(0);\r\n                    }\r\n                    return obj;\r\n                },\r\n                dragInfo:        function (scope) {\r\n                    var _node = scope.getData(),\r\n                        _tree = scope.getScopeTree(),\r\n                        _parent = scope.getNode(_node.__parent_real__);\r\n                    return {\r\n                        node:    _node,\r\n                        parent:  _parent,\r\n                        move:    {\r\n                            parent: _parent,\r\n                            pos:    _node.__index__\r\n                        },\r\n                        scope:   scope,\r\n                        target:  _tree,\r\n                        drag:    _tree,\r\n                        drop:    scope.getPrevSibling(_node),\r\n                        changed: false\r\n                    };\r\n                },\r\n                height:          function (element) {\r\n                    return element.prop('scrollHeight');\r\n                },\r\n                width:           function (element) {\r\n                    return element.prop('scrollWidth');\r\n                },\r\n                offset:          function (element) {\r\n                    var boundingClientRect = element[0].getBoundingClientRect();\r\n                    return {\r\n                        width:  element.prop('offsetWidth'),\r\n                        height: element.prop('offsetHeight'),\r\n                        top:    boundingClientRect.top + ($window.pageYOffset || $document[0].body.scrollTop || $document[0].documentElement.scrollTop),\r\n                        left:   boundingClientRect.left + ($window.pageXOffset || $document[0].body.scrollLeft || $document[0].documentElement.scrollLeft)\r\n                    };\r\n                },\r\n                positionStarted: function (e, target) {\r\n                    var pos = {};\r\n                    pos.offsetX = e.pageX - this.offset(target).left;\r\n                    pos.offsetY = e.pageY - this.offset(target).top;\r\n                    pos.startX = pos.lastX = e.pageX;\r\n                    pos.startY = pos.lastY = e.pageY;\r\n                    pos.nowX = pos.nowY = pos.distX = pos.distY = pos.dirAx = 0;\r\n                    pos.dirX = pos.dirY = pos.lastDirX = pos.lastDirY = pos.distAxX = pos.distAxY = 0;\r\n                    return pos;\r\n                },\r\n                positionMoved:   function (e, pos, firstMoving) {\r\n                    // mouse position last events\r\n                    pos.lastX = pos.nowX;\r\n                    pos.lastY = pos.nowY;\r\n                    // mouse position this events\r\n                    pos.nowX = e.pageX;\r\n                    pos.nowY = e.pageY;\r\n                    // distance mouse moved between events\r\n                    pos.distX = pos.nowX - pos.lastX;\r\n                    pos.distY = pos.nowY - pos.lastY;\r\n                    // direction mouse was moving\r\n                    pos.lastDirX = pos.dirX;\r\n                    pos.lastDirY = pos.dirY;\r\n                    // direction mouse is now moving (on both axis)\r\n                    pos.dirX = pos.distX === 0 ? 0 : pos.distX > 0 ? 1 : -1;\r\n                    pos.dirY = pos.distY === 0 ? 0 : pos.distY > 0 ? 1 : -1;\r\n                    // axis mouse is now moving on\r\n                    var newAx = Math.abs(pos.distX) > Math.abs(pos.distY) ? 1 : 0;\r\n                    // do nothing on first move\r\n                    if (firstMoving) {\r\n                        pos.dirAx = newAx;\r\n                        pos.moving = true;\r\n                        return;\r\n                    }\r\n                    // calc distance moved on this axis (and direction)\r\n                    if (pos.dirAx !== newAx) {\r\n                        pos.distAxX = 0;\r\n                        pos.distAxY = 0;\r\n                    } else {\r\n                        pos.distAxX += Math.abs(pos.distX);\r\n                        if (pos.dirX !== 0 && pos.dirX !== pos.lastDirX) {\r\n                            pos.distAxX = 0;\r\n                        }\r\n                        pos.distAxY += Math.abs(pos.distY);\r\n                        if (pos.dirY !== 0 && pos.dirY !== pos.lastDirY) {\r\n                            pos.distAxY = 0;\r\n                        }\r\n                    }\r\n                    pos.dirAx = newAx;\r\n                },\r\n                replaceIndent:   function (scope, element, indent, attr) {\r\n                    attr =  attr || 'left';\r\n                    angular.element(element.children()[0]).css(attr, scope.$callbacks.calsIndent(indent));\r\n                }\r\n            };\r\n            return _$helper;\r\n        }]\r\n);\n\nangular.module('ntt.TreeDnD')\n    .factory(\n    '$TreeDnDPlugin',['$injector', function ($injector) {\n        var _fnget = function (name) {\n                if (angular.isDefined($injector) && $injector.has(name)) {\n                    return $injector.get(name);\n                }\n                return null;\n            };\n        return _fnget;\n    }]\n);\n\nangular.module('ntt.TreeDnD')\n    .factory(\n    '$TreeDnDTemplate', [\n        '$templateCache', function ($templateCache) {\n            var templatePath = 'template/TreeDnD/TreeDnD.html',\n                copyPath = 'template/TreeDnD/TreeDnDStatusCopy.html',\n                movePath = 'template/TreeDnD/TreeDnDStatusMove.html',\n                scopes = {},\n                temp,\n                _$init = {\n                    setMove: function (path, scope) {\n                        if (!scopes[scope.$id]) {\n                            scopes[scope.$id] = {};\n                        }\n                        scopes[scope.$id].movePath = path;\n                    },\n                    setCopy: function (path, scope) {\n                        if (!scopes[scope.$id]) {\n                            scopes[scope.$id] = {};\n                        }\n                        scopes[scope.$id].copyPath = path;\n                    },\n                    getPath: function () {\n                        return templatePath;\n                    },\n                    getCopy: function (scope) {\n                        if (scopes[scope.$id] && scopes[scope.$id].copyPath) {\n                            temp = $templateCache.get(scopes[scope.$id].copyPath);\n                            if (temp) {\n                                return temp;\n                            }\n                        }\n                        return $templateCache.get(copyPath);\n                    },\n                    getMove: function (scope) {\n                        if (scopes[scope.$id] && scopes[scope.$id].movePath) {\n                            temp = $templateCache.get(scopes[scope.$id].movePath);\n                            if (temp) {\n                                return temp;\n                            }\n                        }\n                        return $templateCache.get(movePath);\n                    }\n                };\n\n            return _$init;\n        }]\n);\n\nangular.module('ntt.TreeDnD')\r\n    .factory('$TreeDnDViewport', fnInitTreeDnDViewport);\r\n\r\nfnInitTreeDnDViewport.$inject = ['$window', '$document', '$timeout', '$q', '$compile'];\r\n\r\nfunction fnInitTreeDnDViewport($window, $document, $timeout, $q, $compile) {\r\n\r\n    var viewport      = null,\r\n        isUpdating    = false,\r\n        isRender      = false,\r\n        updateAgain   = false,\r\n        viewportRect,\r\n        items         = [],\r\n        nodeTemplate,\r\n        updateTimeout,\r\n        renderTime,\r\n        $initViewport = {\r\n            setViewport:   setViewport,\r\n            getViewport:   getViewport,\r\n            add:           add,\r\n            setTemplate:   setTemplate,\r\n            getItems:      getItems,\r\n            updateDelayed: updateDelayed\r\n        },\r\n        eWindow       = angular.element($window);\r\n\r\n    eWindow.on('load resize scroll', updateDelayed);\r\n\r\n    return $initViewport;\r\n\r\n    function update() {\r\n\r\n        viewportRect = {\r\n            width:  eWindow.prop('offsetWidth') || document.documentElement.clientWidth,\r\n            height: eWindow.prop('offsetHeight') || document.documentElement.clientHeight,\r\n            top:    $document[0].body.scrollTop || $document[0].documentElement.scrollTop,\r\n            left:   $document[0].body.scrollLeft || $document[0].documentElement.scrollLeft\r\n        };\r\n\r\n        if (isUpdating || isRender) {\r\n            updateAgain = true;\r\n            return;\r\n        }\r\n        isUpdating = true;\r\n\r\n        recursivePromise();\r\n    }\r\n\r\n    function recursivePromise() {\r\n        if (isRender) {\r\n            return;\r\n        }\r\n\r\n        var number = number > 0 ? number : items.length, item;\r\n\r\n        if (number > 0) {\r\n            item = items[0];\r\n\r\n            isRender   = true;\r\n            renderTime = $timeout(function () {\r\n                //item.element.html(nodeTemplate);\r\n                //$compile(item.element.contents())(item.scope);\r\n\r\n                items.splice(0, 1);\r\n                isRender = false;\r\n                number--;\r\n                $timeout.cancel(renderTime);\r\n                recursivePromise();\r\n            }, 0);\r\n\r\n        } else {\r\n            isUpdating = false;\r\n            if (updateAgain) {\r\n                updateAgain = false;\r\n                update();\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * Check if a point is inside specified bounds\r\n     * @param x\r\n     * @param y\r\n     * @param bounds\r\n     * @returns {boolean}\r\n     */\r\n    function pointIsInsideBounds(x, y, bounds) {\r\n        return x >= bounds.left &&\r\n               y >= bounds.top &&\r\n               x <= bounds.left + bounds.width &&\r\n               y <= bounds.top + bounds.height;\r\n    }\r\n\r\n    /**\r\n     * @name setViewport\r\n     * @desciption Set the viewport element\r\n     * @param element\r\n     */\r\n    function setViewport(element) {\r\n        viewport = element;\r\n    }\r\n\r\n    /**\r\n     * Return the current viewport\r\n     * @returns {*}\r\n     */\r\n    function getViewport() {\r\n        return viewport;\r\n    }\r\n\r\n    /**\r\n     * trigger an update\r\n     */\r\n    function updateDelayed() {\r\n        $timeout.cancel(updateTimeout);\r\n        updateTimeout = $timeout(function () {\r\n            update();\r\n        }, 100);\r\n    }\r\n\r\n    /**\r\n     * Add listener for event\r\n     * @param element\r\n     * @param callback\r\n     */\r\n    function add(scope, element) {\r\n        //console.log('call add');\r\n        updateDelayed();\r\n        items.push({\r\n            element: element,\r\n            scope:   scope\r\n        });\r\n    }\r\n\r\n    function setTemplate(scope, template) {\r\n        nodeTemplate = template;\r\n    }\r\n\r\n    /**\r\n     * Get list of items\r\n     * @returns {Array}\r\n     */\r\n    function getItems() {\r\n        return items;\r\n    }\r\n}\n\nangular.module('ntt.TreeDnD')\r\n    .factory(\r\n    '$TreeDnDFilter', [\r\n        '$filter', function ($filter) {\r\n            return fnInitFilter;\r\n\r\n            function for_all_descendants(options, node, fieldChild, fnBefore, fnAfter, parentPassed) {\r\n                if (!angular.isFunction(fnBefore)) {\r\n                    return null;\r\n                }\r\n\r\n                var _i, _len, _nodes,\r\n                    _nodePassed  = fnBefore(options, node),\r\n                    _childPassed = false;\r\n\r\n                if (angular.isDefined(node[fieldChild])) {\r\n                    _nodes = node[fieldChild];\r\n                    _len   = _nodes.length;\r\n                    for (_i = 0; _i < _len; _i++) {\r\n                        _childPassed = for_all_descendants(\r\n                                options,\r\n                                _nodes[_i],\r\n                                fieldChild,\r\n                                fnBefore,\r\n                                fnAfter,\r\n                                       _nodePassed || parentPassed\r\n                            ) || _childPassed;\r\n                    }\r\n                }\r\n\r\n                if (angular.isFunction(fnAfter)) {\r\n                    fnAfter(options, node, _nodePassed === true, _childPassed === true, parentPassed === true);\r\n                }\r\n\r\n                return _nodePassed || _childPassed;\r\n            }\r\n\r\n            /**\r\n             * Check data with callback\r\n             * @param {string|object|function|regex} callback\r\n             * @param {*} data\r\n             * @returns {null|boolean}\r\n             * @private\r\n             */\r\n            function _fnCheck(callback, data) {\r\n                if (angular.isUndefinedOrNull(data) || angular.isArray(data)) {\r\n                    return null;\r\n                }\r\n\r\n                if (angular.isFunction(callback)) {\r\n                    return callback(data, $filter);\r\n                } else {\r\n                    if (typeof callback === 'boolean') {\r\n                        data = !!data;\r\n                        return data === callback;\r\n                    } else if (angular.isDefined(callback)) {\r\n                        try {\r\n                            var _regex = new RegExp(callback);\r\n                            return _regex.test(data);\r\n                        }\r\n                        catch (err) {\r\n                            if (typeof data === 'string') {\r\n                                return data.indexOf(callback) > -1;\r\n                            } else {\r\n                                return null;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        return null;\r\n                    }\r\n                }\r\n            }\r\n\r\n            /**\r\n             * `fnProcess` to call `_fnCheck`. If `condition` is `array` then call `for_each_filter`\r\n             * else will call `_fnCheck`. Specical `condition.field` is `_$` then apply `condition.callback` for all field, if have `field` invaild then `return true`.\r\n             *\r\n             * @param node\r\n             * @param condition\r\n             * @param isAnd\r\n             * @returns {null|boolean}\r\n             * @private\r\n             */\r\n            function _fnProccess(node, condition, isAnd) {\r\n                if (angular.isArray(condition)) {\r\n                    return for_each_filter(node, condition, isAnd);\r\n                } else {\r\n                    var _key      = condition.field,\r\n                        _callback = condition.callback,\r\n                        _iO, _keysO, _lenO;\r\n\r\n                    if (_key === '_$') {\r\n                        _keysO = Object.keys(node);\r\n                        _lenO  = _keysO.length;\r\n                        for (_iO = 0; _iO < _lenO; _iO++) {\r\n                            if (_fnCheck(_callback, node[_keysO[_iO]])) {\r\n                                return true;\r\n                            }\r\n                        }\r\n                    } else if (angular.isDefined(node[_key])) {\r\n                        return _fnCheck(_callback, node[_key]);\r\n                    }\r\n                }\r\n                return null;\r\n            }\r\n\r\n            /**\r\n             *\r\n             * @param {object} node\r\n             * @param {array} conditions Array `conditions`\r\n             * @param {boolean} isAnd check with condition `And`, if `And` then `return false` when all `false`\r\n             * @returns {null|boolean}\r\n             */\r\n            function for_each_filter(node, conditions, isAnd) {\r\n                var i, len = conditions.length || 0, passed = false;\r\n                if (len === 0) {\r\n                    return null;\r\n                }\r\n\r\n                for (i = 0; i < len; i++) {\r\n                    if (_fnProccess(node, conditions[i], !isAnd)) {\r\n                        passed = true;\r\n                        // if condition `or` then return;\r\n                        if (!isAnd) {\r\n                            return true;\r\n                        }\r\n                    } else {\r\n\r\n                        // if condition `and` and result in fnProccess = false then return;\r\n                        if (isAnd) {\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return passed;\r\n            }\r\n\r\n            /**\r\n             * Will call _fnAfter to clear data no need\r\n             * @param {object} options\r\n             * @param {object} node\r\n             * @param {boolean} isNodePassed\r\n             * @param {boolean} isChildPassed\r\n             * @param {boolean} isParentPassed\r\n             * @private\r\n             */\r\n            function _fnAfter(options, node, isNodePassed, isChildPassed, isParentPassed) {\r\n                if (isNodePassed === true) {\r\n                    node.__filtered__         = true;\r\n                    node.__filtered_visible__ = true;\r\n                    return; //jmp\r\n                } else if (isChildPassed === true && options.showParent === true\r\n                           || isParentPassed === true && options.showChild === true) {\r\n                    node.__filtered__         = false;\r\n                    node.__filtered_visible__ = true;\r\n                    return; //jmp\r\n                }\r\n\r\n                // remove attr __filtered__\r\n                delete node.__filtered__;\r\n                delete node.__filtered_visible__;\r\n            }\r\n\r\n            /**\r\n             * `fnBefore` will called when `for_all_descendants` of `node` checking.\r\n             * If `filter` empty then return `true` else result of function `_fnProccess` {@see _fnProccess}\r\n             *\r\n             * @param {object} options\r\n             * @param {object} node\r\n             * @returns {null|boolean}\r\n             * @private\r\n             */\r\n            function _fnBefore(options, node) {\r\n                if (options.filter.length === 0) {\r\n                    return true;\r\n                } else {\r\n                    return _fnProccess(node, options.filter, options.beginAnd || false);\r\n                }\r\n            }\r\n\r\n            /**\r\n             * `_fnConvert` to convert `filter` `object` to `array` invaild.\r\n             *\r\n             * @param {object|array} filters\r\n             * @returns {array} Instead of `filter` or new array invaild *(converted from filter)*\r\n             * @private\r\n             */\r\n            function _fnConvert(filters) {\r\n                var _iF, _lenF, _keysF,\r\n                    _filter,\r\n                    _state;\r\n                // convert filter object to array filter\r\n                if (angular.isObject(filters) && !angular.isArray(filters)) {\r\n                    _keysF  = Object.keys(filters);\r\n                    _lenF   = _keysF.length;\r\n                    _filter = [];\r\n\r\n                    if (_lenF > 0) {\r\n                        for (_iF = 0; _iF < _lenF; _iF++) {\r\n\r\n                            if (typeof filters[_keysF[_iF]] === 'string' && filters[_keysF[_iF]].length === 0) {\r\n                                continue;\r\n                            } else if (angular.isArray(filters[_keysF[_iF]])) {\r\n                                _state = filters[_keysF[_iF]];\r\n                            } else if (angular.isObject(filters[_keysF[_iF]])) {\r\n                                _state = _fnConvert(filters[_keysF[_iF]]);\r\n                            } else {\r\n                                _state = {\r\n                                    field:    _keysF[_iF],\r\n                                    callback: filters[_keysF[_iF]]\r\n                                };\r\n                            }\r\n                            _filter.push(_state);\r\n                        }\r\n                    }\r\n                    _state = null;\r\n                    return _filter;\r\n                }\r\n                else {\r\n                    return filters;\r\n                }\r\n            }\r\n\r\n            /**\r\n             * `fnInitFilter` function is constructor of service `$TreeDnDFilter`.\r\n             * @constructor\r\n             * @param {object|array} treeData\r\n             * @param {object|array} filters\r\n             * @param {object} options\r\n             * @param {string} keyChild\r\n             * @returns {array} Return `treeData` or `treeData` with `filter`\r\n             * @private\r\n             */\r\n            function fnInitFilter(treeData, filters, options, keyChild) {\r\n                if (!angular.isArray(treeData)\r\n                    || treeData.length === 0\r\n                    || !(angular.isArray(filters) || angular.isObject(filters))\r\n                    || filters.length === 0) {\r\n                    return treeData;\r\n                }\r\n\r\n                var _i, _len,\r\n                    _filter;\r\n\r\n                _filter = _fnConvert(filters);\r\n                if (!(angular.isArray(_filter) || angular.isObject(_filter))\r\n                    || _filter.length === 0) {\r\n                    return treeData;\r\n                }\r\n                options.filter = _filter;\r\n                for (_i = 0, _len = treeData.length; _i < _len; _i++) {\r\n                    for_all_descendants(\r\n                        options,\r\n                        treeData[_i],\r\n                        keyChild || '__children__',\r\n                        _fnBefore, _fnAfter\r\n                    );\r\n                }\r\n\r\n                return treeData;\r\n            }\r\n\r\n        }]\r\n);\n\nangular.module('ntt.TreeDnD')\r\n    .factory(\r\n    '$TreeDnDOrderBy', [\r\n        '$filter', function ($filter) {\r\n            var _fnOrderBy = $filter('orderBy'),\r\n                for_all_descendants = function for_all_descendants(options, node, name, fnOrderBy) {\r\n                    var _i, _len, _nodes;\r\n\r\n                    if (angular.isDefined(node[name])) {\r\n                        _nodes = node[name];\r\n                        _len = _nodes.length;\r\n                        // OrderBy children\r\n                        for (_i = 0; _i < _len; _i++) {\r\n                            _nodes[_i] = for_all_descendants(options, _nodes[_i], name, fnOrderBy);\r\n                        }\r\n\r\n                        node[name] = fnOrderBy(node[name], options);\r\n                    }\r\n                    return node;\r\n                },\r\n                _fnOrder = function _fnOrder(list, orderBy) {\r\n                    return _fnOrderBy(list, orderBy);\r\n                },\r\n                _fnMain = function _fnMain(treeData, orderBy) {\r\n                    if (!angular.isArray(treeData)\r\n                        || treeData.length === 0\r\n                        || !(angular.isArray(orderBy) || angular.isObject(orderBy) || angular.isString(orderBy) || angular.isFunction(orderBy))\r\n                        || orderBy.length === 0 && !angular.isFunction(orderBy)) {\r\n                        return treeData;\r\n                    }\r\n\r\n                    var _i, _len;\r\n\r\n                    for (_i = 0, _len = treeData.length; _i < _len; _i++) {\r\n                        treeData[_i] = for_all_descendants(\r\n                            orderBy,\r\n                            treeData[_i],\r\n                            '__children__',\r\n                            _fnOrder\r\n                        );\r\n                    }\r\n\r\n                    return _fnOrder(treeData, orderBy);\r\n                };\r\n\r\n            return _fnMain;\r\n        }]\r\n);\n\nangular.module('ntt.TreeDnD')\r\n    .factory(\r\n    '$TreeDnDDrag', [\r\n        '$timeout', '$TreeDnDHelper',\r\n        function ($timeout, $TreeDnDHelper) {\r\n            function _fnPlaceHolder(e, $params) {\r\n                if ($params.placeElm) {\r\n                    var _offset = $TreeDnDHelper.offset($params.placeElm);\r\n                    if (_offset.top <= e.pageY && e.pageY <= _offset.top + _offset.height &&\r\n                        _offset.left <= e.pageX && e.pageX <= _offset.left + _offset.width\r\n                    ) {\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            }\r\n\r\n            function _fnDragStart(e, $params) {\r\n                if (!$params.hasTouch && (e.button === 2 || e.which === 3)) {\r\n                    // disable right click\r\n                    return;\r\n                }\r\n                if (e.uiTreeDragging || e.originalEvent && e.originalEvent.uiTreeDragging) { // event has already fired in other scope.\r\n                    return;\r\n                }\r\n                // the element which is clicked.\r\n                var eventElm   = angular.element(e.target),\r\n                    eventScope = eventElm.scope();\r\n                if (!eventScope || !eventScope.$type) {\r\n                    return;\r\n                }\r\n                // if (eventScope.$type !== 'TreeDnDNode') { // Check if it is a node or a handle\r\n                //     return;\r\n                // }\r\n\r\n                if (eventScope.$type !== 'TreeDnDNodeHandle') { // If the node has a handle, then it should be clicked by the handle\r\n                    return;\r\n                }\r\n\r\n                var eventElmTagName = eventElm.prop('tagName').toLowerCase(),\r\n                    dragScope,\r\n                    _$scope         = $params.$scope;\r\n                if (eventElmTagName === 'input'\r\n                    || eventElmTagName === 'textarea'\r\n                    || eventElmTagName === 'button'\r\n                    || eventElmTagName === 'select') { // if it's a input or button, ignore it\r\n                    return;\r\n                }\r\n                // check if it or it's parents has a 'data-nodrag' attribute\r\n                while (eventElm && eventElm[0] && eventElm[0] !== $params.element) {\r\n                    if ($TreeDnDHelper.nodrag(eventElm)) { // if the node mark as `nodrag`, DONOT drag it.\r\n                        return;\r\n                    }\r\n                    eventElm = eventElm.parent();\r\n                }\r\n\r\n                e.uiTreeDragging = true; // stop event bubbling\r\n                if (e.originalEvent) {\r\n                    e.originalEvent.uiTreeDragging = true;\r\n                }\r\n                e.preventDefault();\r\n\r\n                dragScope = eventScope.getScopeNode();\r\n\r\n                $params.dragInfo = $TreeDnDHelper.dragInfo(dragScope);\r\n\r\n                if (!_$scope.$callbacks.beforeDrag(dragScope, $params.dragInfo)) {\r\n                    return;\r\n                }\r\n\r\n                $params.firstMoving = true;\r\n                _$scope.setDragging($params.dragInfo);\r\n\r\n                var eventObj = $TreeDnDHelper.eventObj(e);\r\n                $params.pos  = $TreeDnDHelper.positionStarted(eventObj, dragScope.$element);\r\n\r\n                if (dragScope.isTable) {\r\n                    $params.dragElm = angular.element($params.$window.document.createElement('table'))\r\n                        .addClass(_$scope.$class.tree)\r\n                        .addClass(_$scope.$class.drag)\r\n                        .addClass(_$scope.$tree_class);\r\n                } else {\r\n                    $params.dragElm = angular.element($params.$window.document.createElement('ul'))\r\n                        .addClass(_$scope.$class.drag)\r\n                        .addClass('tree-dnd-nodes')\r\n                        .addClass(_$scope.$tree_class);\r\n                }\r\n\r\n                $params.dragElm.css(\r\n                    {\r\n                        'width':   $TreeDnDHelper.width(dragScope.$element) + 'px',\r\n                        'z-index': 9995\r\n                    }\r\n                );\r\n\r\n                $params.offsetEdge = 0;\r\n                var _width         = $TreeDnDHelper.width(dragScope.$element),\r\n                    _scope         = dragScope,\r\n                    _element       = _scope.$element,\r\n                    _clone,\r\n                    _needCollapse  = !!_$scope.enabledCollapse,\r\n                    _copied        = false,\r\n                    _tbody,\r\n                    _frag;\r\n\r\n                if (_scope.isTable) {\r\n                    $params.offsetEdge = $params.dragInfo.node.__level__ - 1;\r\n                    _tbody             = angular.element(document.createElement('tbody'));\r\n                    _frag              = angular.element(document.createDocumentFragment());\r\n\r\n                    _$scope.for_all_descendants(\r\n                        $params.dragInfo.node, function (_node) {\r\n                            _scope   = _$scope.getScope(_node);\r\n                            _element = _scope && _scope.$element;\r\n                            if (!_scope || !_element) {\r\n                                return; //jmp skip\r\n                            }\r\n\r\n                            if (!_copied) {\r\n                                _clone = _element.clone();\r\n\r\n                                $TreeDnDHelper.replaceIndent(\r\n                                    _$scope,\r\n                                    _clone,\r\n                                    _node.__level__ - $params.offsetEdge,\r\n                                    'padding-left'\r\n                                );\r\n\r\n                                _frag.append(_clone);\r\n\r\n                                // skip all, just clone parent\r\n                                if (_needCollapse) {\r\n                                    _copied = true;\r\n                                }\r\n                            }\r\n\r\n                            // hide if have status Move;\r\n                            if (_$scope.enabledMove && _$scope.$class.hidden) {\r\n                                _element.addClass(_$scope.$class.hidden);\r\n                            }\r\n                        }\r\n                    );\r\n                    _tbody.append(_frag);\r\n                    $params.dragElm.append(_tbody);\r\n                } else {\r\n\r\n                    _clone = _element.clone();\r\n                    if (_needCollapse) {\r\n                        _clone[0].querySelector('[tree-dnd-nodes]').remove();\r\n                    }\r\n\r\n                    // hide if have status Move;\r\n                    $params.dragElm.append(_clone);\r\n                    if (_$scope.enabledMove && _$scope.$class.hidden) {\r\n                        _element.addClass(_$scope.$class.hidden);\r\n                    }\r\n                }\r\n\r\n                $params.dragElm.css(\r\n                    {\r\n                        'left': eventObj.pageX - $params.pos.offsetX + _$scope.$callbacks.calsIndent(\r\n                                $params.offsetEdge + 1,\r\n                                true,\r\n                                true\r\n                        ) + 'px',\r\n                        'top':  eventObj.pageY - $params.pos.offsetY + 'px'\r\n                    }\r\n                );\r\n                // moving item with descendant\r\n                $params.$document.find('body').append($params.dragElm);\r\n                if (_$scope.$callbacks.droppable()) {\r\n                    $params.placeElm = _$scope.initPlace(dragScope.$element, $params.dragElm);\r\n\r\n                    if (dragScope.isTable) {\r\n                        $TreeDnDHelper.replaceIndent(_$scope, $params.placeElm, $params.dragInfo.node.__level__);\r\n                    }\r\n\r\n                    $params.placeElm.css('width', _width);\r\n                }\r\n\r\n                _$scope.showPlace();\r\n                _$scope.targeting  = true;\r\n\r\n                if (_$scope.enabledStatus) {\r\n                    _$scope.refreshStatus();\r\n                    _$scope.setPositionStatus(e);\r\n                }\r\n\r\n                angular.element($params.$document).bind('touchend', $params.dragEndEvent);\r\n                angular.element($params.$document).bind('touchcancel', $params.dragEndEvent);\r\n                angular.element($params.$document).bind('touchmove', $params.dragMoveEvent);\r\n                angular.element($params.$document).bind('mouseup', $params.dragEndEvent);\r\n                angular.element($params.$document).bind('mousemove', $params.dragMoveEvent);\r\n                angular.element($params.$document).bind('mouseleave', $params.dragCancelEvent);\r\n\r\n                $params.document_height = Math.max(\r\n                    $params.body.scrollHeight,\r\n                    $params.body.offsetHeight,\r\n                    $params.html.clientHeight,\r\n                    $params.html.scrollHeight,\r\n                    $params.html.offsetHeight\r\n                );\r\n\r\n                $params.document_width = Math.max(\r\n                    $params.body.scrollWidth,\r\n                    $params.body.offsetWidth,\r\n                    $params.html.clientWidth,\r\n                    $params.html.scrollWidth,\r\n                    $params.html.offsetWidth\r\n                );\r\n            }\r\n\r\n            function _fnDragMove(e, $params) {\r\n                var _$scope = $params.$scope;\r\n                if (!$params.dragStarted) {\r\n                    if (!$params.dragDelaying) {\r\n                        $params.dragStarted = true;\r\n                        _$scope.$safeApply(\r\n                            function () {\r\n                                _$scope.$callbacks.dragStart($params.dragInfo);\r\n                            }\r\n                        );\r\n                    }\r\n                    return;\r\n                }\r\n\r\n                if ($params.dragElm) {\r\n                    e.preventDefault();\r\n                    if ($params.$window.getSelection) {\r\n                        $params.$window.getSelection().removeAllRanges();\r\n                    } else if ($params.$window.document.selection) {\r\n                        $params.$window.document.selection.empty();\r\n                    }\r\n\r\n                    var eventObj   = $TreeDnDHelper.eventObj(e),\r\n                        leftElmPos = eventObj.pageX - $params.pos.offsetX,\r\n                        topElmPos  = eventObj.pageY - $params.pos.offsetY;\r\n\r\n                    //dragElm can't leave the screen on the left\r\n                    if (leftElmPos < 0) {\r\n                        leftElmPos = 0;\r\n                    }\r\n\r\n                    //dragElm can't leave the screen on the top\r\n                    if (topElmPos < 0) {\r\n                        topElmPos = 0;\r\n                    }\r\n\r\n                    //dragElm can't leave the screen on the bottom\r\n                    if (topElmPos + 10 > $params.document_height) {\r\n                        topElmPos = $params.document_height - 10;\r\n                    }\r\n\r\n                    //dragElm can't leave the screen on the right\r\n                    if (leftElmPos + 10 > $params.document_width) {\r\n                        leftElmPos = $params.document_width - 10;\r\n                    }\r\n\r\n                    $params.dragElm.css(\r\n                        {\r\n                            'left': leftElmPos + _$scope.$callbacks.calsIndent(\r\n                                    $params.offsetEdge + 1,\r\n                                    true,\r\n                                    true\r\n                            ) + 'px',\r\n                            'top':  topElmPos + 'px'\r\n                        }\r\n                    );\r\n\r\n                    if (_$scope.enabledStatus) {\r\n                        _$scope.setPositionStatus(e);\r\n                    }\r\n\r\n                    var top_scroll    = window.pageYOffset || $params.$window.document.documentElement.scrollTop,\r\n                        bottom_scroll = top_scroll + (window.innerHeight || $params.$window.document.clientHeight || $params.$window.document.clientHeight);\r\n                    // to scroll down if cursor y-position is greater than the bottom position the vertical scroll\r\n                    if (bottom_scroll < eventObj.pageY && bottom_scroll <= $params.document_height) {\r\n                        window.scrollBy(0, 10);\r\n                    }\r\n                    // to scroll top if cursor y-position is less than the top position the vertical scroll\r\n                    if (top_scroll > eventObj.pageY) {\r\n                        window.scrollBy(0, -10);\r\n                    }\r\n\r\n                    $TreeDnDHelper.positionMoved(e, $params.pos, $params.firstMoving);\r\n\r\n                    if ($params.firstMoving) {\r\n                        $params.firstMoving = false;\r\n                        return;\r\n                    }\r\n                    // check if add it as a child node first\r\n\r\n                    var targetX    = eventObj.pageX - $params.$window.document.body.scrollLeft,\r\n                        targetY    = eventObj.pageY - (window.pageYOffset || $params.$window.document.documentElement.scrollTop),\r\n\r\n                        targetElm,\r\n                        targetScope,\r\n                        targetBefore,\r\n                        targetOffset,\r\n                        isChanged  = true,\r\n                        isVeritcal = true,\r\n                        isEmpty,\r\n                        isSwapped,\r\n                        _scope,\r\n                        _target,\r\n                        _parent,\r\n                        _info      = $params.dragInfo,\r\n                        _move      = _info.move,\r\n                        _drag      = _info.node,\r\n                        _drop      = _info.drop,\r\n                        treeScope  = _info.target,\r\n                        fnSwapTree,\r\n                        isHolder   = _fnPlaceHolder(e, $params);\r\n\r\n                    if (!isHolder) {\r\n                        /* when using elementFromPoint() inside an iframe, you have to call\r\n                         elementFromPoint() twice to make sure IE8 returns the correct value\r\n                         $params.$window.document.elementFromPoint(targetX, targetY);*/\r\n\r\n                        targetElm = angular.element(\r\n                            $params.$window.document.elementFromPoint(\r\n                                targetX,\r\n                                targetY\r\n                            )\r\n                        );\r\n\r\n                        targetScope = targetElm.scope();\r\n                        if (!targetScope || !targetScope.$callbacks || !targetScope.$callbacks.droppable()) {\r\n                            // Not allowed Drop Item\r\n                            return;\r\n                        }\r\n\r\n                        fnSwapTree = function () {\r\n                            treeScope = targetScope.getScopeTree();\r\n                            _target   = _info.target;\r\n\r\n                            if (_info.target !== treeScope) {\r\n                                // Replace by place-holder new\r\n                                _target.hidePlace();\r\n                                _target.targeting   = false;\r\n                                treeScope.targeting = true;\r\n\r\n                                _info.target     = treeScope;\r\n                                $params.placeElm = treeScope.initPlace(targetScope.$element, $params.dragElm);\r\n\r\n                                _target   = null;\r\n                                isSwapped = true;\r\n                            }\r\n                            return true;\r\n                        };\r\n\r\n                        if (angular.isFunction(targetScope.getScopeNode)) {\r\n                            targetScope = targetScope.getScopeNode();\r\n                            if (!fnSwapTree()) {\r\n                                return;\r\n                            }\r\n                        } else {\r\n                            if (targetScope.$type === 'TreeDnDNodes' || targetScope.$type === 'TreeDnD') {\r\n                                if (targetScope.tree_nodes) {\r\n                                    if (targetScope.tree_nodes.length === 0) {\r\n                                        if (!fnSwapTree()) {\r\n                                            return;\r\n                                        }\r\n                                        // Empty\r\n                                        isEmpty = true;\r\n                                    }\r\n                                } else {\r\n                                    return;\r\n                                }\r\n                            } else {\r\n                                return;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if ($params.pos.dirAx && !isSwapped || isHolder) {\r\n                        isVeritcal  = false;\r\n                        targetScope = _info.scope;\r\n                    }\r\n\r\n                    if (!targetScope.$element && !targetScope) {\r\n                        return;\r\n                    }\r\n\r\n                    if (isEmpty) {\r\n                        _move.parent = null;\r\n                        _move.pos    = 0;\r\n\r\n                        _drop = null;\r\n                    } else {\r\n                        // move vertical\r\n                        if (isVeritcal) {\r\n                            targetElm = targetScope.$element; // Get the element of tree-dnd-node\r\n                            if (angular.isUndefinedOrNull(targetElm)) {\r\n                                return;\r\n                            }\r\n                            targetOffset = $TreeDnDHelper.offset(targetElm);\r\n\r\n                            if (targetScope.horizontal && !targetScope.isTable) {\r\n                                targetBefore = eventObj.pageX < targetOffset.left + $TreeDnDHelper.width(targetElm) / 2;\r\n                            } else {\r\n                                if (targetScope.isTable) {\r\n                                    targetBefore = eventObj.pageY < targetOffset.top + $TreeDnDHelper.height(targetElm) / 2;\r\n                                } else {\r\n                                    var _height = $TreeDnDHelper.height(targetElm);\r\n\r\n                                    if (targetScope.getElementChilds()) {\r\n                                        _height -= -$TreeDnDHelper.height(targetScope.getElementChilds());\r\n                                    }\r\n\r\n                                    if (eventObj.pageY > targetOffset.top + _height) {\r\n                                        return;\r\n                                    }\r\n\r\n                                    targetBefore = eventObj.pageY < targetOffset.top + _height / 2;\r\n                                }\r\n                            }\r\n\r\n                            if (!angular.isFunction(targetScope.getData)) {\r\n                                return;\r\n                            }\r\n\r\n                            _target = targetScope.getData();\r\n                            _parent = targetScope.getNode(_target.__parent_real__);\r\n\r\n                            if (targetBefore) {\r\n                                var _prev = targetScope.getPrevSibling(_target);\r\n\r\n                                _move.parent = _parent;\r\n                                _move.pos    = angular.isDefined(_prev) ? _prev.__index__ + 1 : 0;\r\n\r\n                                _drop = _prev;\r\n                            } else {\r\n                                if (_target.__expanded__ && !(_target.__children__.length === 1 && _target.__index_real__ === _drag.__parent_real__)) {\r\n                                    _move.parent = _target;\r\n                                    _move.pos    = 0;\r\n\r\n                                    _drop = null;\r\n                                } else {\r\n                                    _move.parent = _parent;\r\n                                    _move.pos    = _target.__index__ + 1;\r\n\r\n                                    _drop = _target;\r\n                                }\r\n                            }\r\n                        } else {\r\n                            // move horizontal\r\n                            if ($params.pos.dirAx && $params.pos.distAxX >= treeScope.dragBorder) {\r\n                                $params.pos.distAxX = 0;\r\n                                // increase horizontal level if previous sibling exists and is not collapsed\r\n                                if ($params.pos.distX > 0) {\r\n                                    _parent = _drop;\r\n                                    if (!_parent) {\r\n                                        if (_move.pos - 1 >= 0) {\r\n                                            _parent = _move.parent.__children__[_move.pos - 1];\r\n                                        } else {\r\n                                            return;\r\n                                        }\r\n                                    }\r\n\r\n                                    if (_info.drag === _info.target && _parent === _drag && _$scope.enabledMove) {\r\n                                        _parent = treeScope.getPrevSibling(_parent);\r\n                                    }\r\n\r\n                                    if (_parent && _parent.__visible__) {\r\n                                        var _len = _parent.__children__.length;\r\n\r\n                                        _move.parent = _parent;\r\n                                        _move.pos    = _len;\r\n\r\n                                        if (_len > 0) {\r\n                                            _drop = _parent.__children__[_len - 1];\r\n                                        } else {\r\n                                            _drop = null;\r\n                                        }\r\n                                    } else {\r\n                                        // Not changed\r\n                                        return;\r\n                                    }\r\n                                } else if ($params.pos.distX < 0) {\r\n                                    _target = _move.parent;\r\n                                    if (_target &&\r\n                                        (_target.__children__.length === 0 ||\r\n                                         _target.__children__.length - 1 < _move.pos ||\r\n                                         _info.drag === _info.target &&\r\n                                         _target.__index_real__ === _drag.__parent_real__ &&\r\n                                         _target.__children__.length - 1 === _drag.__index__ && _$scope.enabledMove)\r\n                                    ) {\r\n                                        _parent = treeScope.getNode(_target.__parent_real__);\r\n\r\n                                        _move.parent = _parent;\r\n                                        _move.pos    = _target.__index__ + 1;\r\n\r\n                                        _drop = _target;\r\n                                    } else {\r\n                                        // Not changed\r\n                                        return;\r\n                                    }\r\n                                } else {\r\n                                    return;\r\n                                }\r\n                            } else {\r\n                                // limited\r\n                                return;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (_info.drag === _info.target &&\r\n                        _move.parent &&\r\n                        _drag.__parent_real__ === _move.parent.__index_real__ &&\r\n                        _drag.__index__ === _move.pos\r\n                    ) {\r\n                        isChanged = false;\r\n                    }\r\n\r\n                    if (treeScope.$callbacks.accept(_info, _move, isChanged)) {\r\n                        _info.move    = _move;\r\n                        _info.drop    = _drop;\r\n                        _info.changed = isChanged;\r\n                        _info.scope   = targetScope;\r\n\r\n                        if (targetScope.isTable) {\r\n                            $TreeDnDHelper.replaceIndent(\r\n                                treeScope,\r\n                                $params.placeElm,\r\n                                angular.isUndefinedOrNull(_move.parent) ? 1 : _move.parent.__level__ + 1\r\n                            );\r\n\r\n                            if (_drop) {\r\n                                _parent = (_move.parent ? _move.parent.__children__ : null ) || _info.target.treeData;\r\n\r\n                                if (_drop.__index__ < _parent.length - 1) {\r\n                                    // Find fast\r\n                                    _drop  = _parent[_drop.__index__ + 1];\r\n                                    _scope = _info.target.getScope(_drop);\r\n                                    _scope.$element[0].parentNode.insertBefore(\r\n                                        $params.placeElm[0],\r\n                                        _scope.$element[0]\r\n                                    );\r\n                                } else {\r\n                                    _target = _info.target.getLastDescendant(_drop);\r\n                                    _scope  = _info.target.getScope(_target);\r\n                                    _scope.$element.after($params.placeElm);\r\n                                }\r\n                            } else {\r\n                                _scope = _info.target.getScope(_move.parent);\r\n                                if (_scope) {\r\n                                    if (_move.parent) {\r\n                                        _scope.$element.after($params.placeElm);\r\n\r\n                                    } else {\r\n                                        _scope.getElementChilds().prepend($params.placeElm);\r\n                                    }\r\n                                }\r\n                            }\r\n                        } else {\r\n                            _scope = _info.target.getScope(_drop || _move.parent);\r\n                            console.log(_info.target, _scope, _drop, _move.parent);\r\n                            if (_drop) {\r\n                                _scope.$element.after($params.placeElm);\r\n                            } else {\r\n                                _scope.getElementChilds().prepend($params.placeElm);\r\n                            }\r\n                        }\r\n\r\n                        treeScope.showPlace();\r\n\r\n                        _$scope.$safeApply(\r\n                            function () {\r\n                                _$scope.$callbacks.dragMove(_info);\r\n                            }\r\n                        );\r\n                    }\r\n\r\n                }\r\n            }\r\n\r\n            function _fnDragEnd(e, $params) {\r\n                e.preventDefault();\r\n                if ($params.dragElm) {\r\n                    var _passed     = false,\r\n                        _$scope     = $params.$scope,\r\n                        _scope      = _$scope.getScope($params.dragInfo.node),\r\n                        _element    = _scope.$element;\r\n\r\n                    _$scope.$safeApply(\r\n                        function () {\r\n                            _passed = _$scope.$callbacks.beforeDrop($params.dragInfo);\r\n                        }\r\n                    );\r\n\r\n                    // rollback all\r\n                    if (_scope.isTable) {\r\n                        _$scope.for_all_descendants(\r\n                            $params.dragInfo.node, function (_node) {\r\n                                _scope   = _$scope.getScope(_node);\r\n                                _element = _scope && _scope.$element;\r\n                                if (!_scope || !_element) {\r\n                                    return; //jmp skip\r\n                                }\r\n\r\n                                if (_$scope.$class.hidden) {\r\n                                    _element.removeClass(_$scope.$class.hidden);\r\n                                }\r\n                            }\r\n                        );\r\n                    } else {\r\n                        if (_$scope.$class.hidden) {\r\n                            _element.removeClass(_$scope.$class.hidden);\r\n                        }\r\n                    }\r\n\r\n                    $params.dragElm.remove();\r\n                    $params.dragElm = null;\r\n\r\n                    if (_$scope.enabledStatus) {\r\n                        _$scope.hideStatus();\r\n                    }\r\n\r\n                    var _status                       = false;\r\n                    if (_$scope.$$apply) {\r\n                        _$scope.$safeApply(\r\n                            function () {\r\n                                _status = _$scope.$callbacks.dropped(\r\n                                    $params.dragInfo,\r\n                                    _passed\r\n                                );\r\n                            }\r\n                        );\r\n                    } else {\r\n                        _fnBindDrag($params);\r\n                    }\r\n\r\n                    _$scope.$safeApply(\r\n                        function () {\r\n                            _$scope.$callbacks.dragStop($params.dragInfo, _status);\r\n                        }\r\n                    );\r\n\r\n                    $params.dragInfo.target.hidePlace();\r\n                    $params.dragInfo.target.targeting = false;\r\n\r\n                    $params.dragInfo = null;\r\n                    _$scope.$$apply  = false;\r\n                    _$scope.setDragging(null);\r\n                }\r\n\r\n                angular.element($params.$document).unbind('touchend', $params.dragEndEvent); // Mobile\r\n                angular.element($params.$document).unbind('touchcancel', $params.dragEndEvent); // Mobile\r\n                angular.element($params.$document).unbind('touchmove', $params.dragMoveEvent); // Mobile\r\n                angular.element($params.$document).unbind('mouseup', $params.dragEndEvent);\r\n                angular.element($params.$document).unbind('mousemove', $params.dragMoveEvent);\r\n                angular.element($params.$window.document.body).unbind('mouseleave', $params.dragCancelEvent);\r\n            }\r\n\r\n            function _fnDragStartEvent(e, $params) {\r\n                if ($params.$scope.$callbacks.draggable()) {\r\n                    _fnDragStart(e, $params);\r\n                }\r\n            }\r\n\r\n            function _fnBindDrag($params) {\r\n                $params.element.bind(\r\n                    'touchstart mousedown', function (e) {\r\n                        $params.dragDelaying = true;\r\n                        $params.dragStarted  = false;\r\n                        _fnDragStartEvent(e, $params);\r\n                        $params.dragTimer    = $timeout(\r\n                            function () {\r\n                                $params.dragDelaying = false;\r\n                            }, $params.$scope.dragDelay\r\n                        );\r\n                    }\r\n                );\r\n                $params.element.bind(\r\n                    'touchend touchcancel mouseup', function () {\r\n                        $timeout.cancel($params.dragTimer);\r\n                    }\r\n                );\r\n            }\r\n\r\n            function _fnKeydownHandler(e, $params) {\r\n                var _$scope = $params.$scope;\r\n                if (e.keyCode === 27) {\r\n                    if (_$scope.enabledStatus) {\r\n                        _$scope.hideStatus();\r\n                    }\r\n\r\n                    _$scope.$$apply = false;\r\n                    _fnDragEnd(e, $params);\r\n                } else {\r\n                    if (_$scope.enabledHotkey && e.shiftKey) {\r\n                        _$scope.enableMove(true);\r\n                        if (_$scope.enabledStatus) {\r\n                            _$scope.refreshStatus();\r\n                        }\r\n\r\n                        if (!$params.dragInfo) {\r\n                            return;\r\n                        }\r\n\r\n                        var _scope   = _$scope.getScope($params.dragInfo.node),\r\n                            _element = _scope.$element;\r\n\r\n                        if (_scope.isTable) {\r\n                            _$scope.for_all_descendants(\r\n                                $params.dragInfo.node, function (_node) {\r\n                                    _scope   = _$scope.getScope(_node);\r\n                                    _element = _scope && _scope.$element;\r\n                                    if (!_scope || !_element) {\r\n                                        return; //jmp skip\r\n                                    }\r\n\r\n                                    if (_$scope.$class.hidden) {\r\n                                        _element.addClass(_$scope.$class.hidden);\r\n                                    }\r\n                                }\r\n                            );\r\n                        } else {\r\n                            if (_$scope.$class.hidden) {\r\n                                _element.addClass(_$scope.$class.hidden);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            function _fnKeyupHandler(e, $params) {\r\n                var _$scope = $params.$scope;\r\n                if (_$scope.enabledHotkey && !e.shiftKey) {\r\n                    _$scope.enableMove(false);\r\n\r\n                    if (_$scope.enabledStatus) {\r\n                        _$scope.refreshStatus();\r\n                    }\r\n\r\n                    if (!$params.dragInfo) {\r\n                        return;\r\n                    }\r\n\r\n                    var _scope   = _$scope.getScope($params.dragInfo.node),\r\n                        _element = _scope.$element;\r\n\r\n                    if (_scope.isTable) {\r\n                        _$scope.for_all_descendants(\r\n                            $params.dragInfo.node, function (_node) {\r\n                                _scope   = _$scope.getScope(_node);\r\n                                _element = _scope && _scope.$element;\r\n                                if (!_scope || !_element) {\r\n                                    return; //jmp skip\r\n                                }\r\n                                if (_$scope.$class.hidden) {\r\n                                    _element.removeClass(_$scope.$class.hidden);\r\n                                }\r\n                            }\r\n                        );\r\n                    } else {\r\n                        if (_$scope.$class.hidden) {\r\n                            _element.removeClass(_$scope.$class.hidden);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            function _$init(scope, element, $window, $document) {\r\n                var $params        = {\r\n                        hasTouch:        'ontouchstart' in window,\r\n                        firstMoving:     null,\r\n                        dragInfo:        null,\r\n                        pos:             null,\r\n                        placeElm:        null,\r\n                        dragElm:         null,\r\n                        dragDelaying:    true,\r\n                        dragStarted:     false,\r\n                        dragTimer:       null,\r\n                        body:            document.body,\r\n                        html:            document.documentElement,\r\n                        document_height: null,\r\n                        document_width:  null,\r\n                        offsetEdge:      null,\r\n                        $scope:          scope,\r\n                        $window:         $window,\r\n                        $document:       $document,\r\n                        element:         element,\r\n                        bindDrag:        function () {\r\n                            _fnBindDrag($params);\r\n                        },\r\n                        dragEnd:         function (e) {\r\n                            _fnDragEnd(e, $params);\r\n                        },\r\n                        dragMoveEvent:   function (e) {\r\n                            _fnDragMove(e, $params);\r\n                        },\r\n                        dragEndEvent:    function (e) {\r\n                            scope.$$apply = true;\r\n                            _fnDragEnd(e, $params);\r\n                        },\r\n                        dragCancelEvent: function (e) {\r\n                            _fnDragEnd(e, $params);\r\n                        }\r\n                    },\r\n                    keydownHandler = function (e) {\r\n                        return _fnKeydownHandler(e, $params);\r\n                    },\r\n                    keyupHandler   = function (e) {\r\n                        return _fnKeyupHandler(e, $params);\r\n                    };\r\n\r\n                scope.dragEnd = function (e) {\r\n                    $params.dragEnd(e);\r\n                };\r\n\r\n                $params.bindDrag();\r\n\r\n                angular.element($window.document.body).bind('keydown', keydownHandler);\r\n                angular.element($window.document.body).bind('keyup', keyupHandler);\r\n                //unbind handler that retains scope\r\n                scope.$on(\r\n                    '$destroy', function () {\r\n                        angular.element($window.document.body).unbind('keydown', keydownHandler);\r\n                        angular.element($window.document.body).unbind('keyup', keyupHandler);\r\n                        if (scope.statusElm) {\r\n                            scope.statusElm.remove();\r\n                        }\r\n\r\n                        if (scope.placeElm) {\r\n                            scope.placeElm.remove();\r\n                        }\r\n                    }\r\n                );\r\n            }\r\n\r\n            return _$init;\r\n        }\r\n    ]\r\n);\n\nangular.module('ntt.TreeDnD')\r\n    .factory(\r\n    '$TreeDnDControl', function () {\r\n        var _target, _parent,\r\n            i, len;\r\n\r\n        function fnSetCollapse(node) {\r\n            node.__expanded__ = false;\r\n        }\r\n\r\n        function fnSetExpand(node) {\r\n            node.__expanded__ = true;\r\n        }\r\n\r\n        function _$init(scope) {\r\n            var n, tree = {\r\n                selected_node:       null,\r\n                for_all_descendants: scope.for_all_descendants,\r\n                select_node:         function (node) {\r\n                    if (!node) {\r\n                        if (tree.selected_node) {\r\n                            delete tree.selected_node.__selected__;\r\n                        }\r\n                        tree.selected_node = null;\r\n                        return null;\r\n                    }\r\n\r\n                    if (node !== tree.selected_node) {\r\n                        if (tree.selected_node) {\r\n                            delete tree.selected_node.__selected__;\r\n                        }\r\n                        node.__selected__  = true;\r\n                        tree.selected_node = node;\r\n                        tree.expand_all_parents(node);\r\n                        if (angular.isFunction(tree.on_select)) {\r\n                            tree.on_select(node);\r\n                        }\r\n                    }\r\n                    return node;\r\n                },\r\n                deselect_node:       function () {\r\n                    _target = null;\r\n                    if (tree.selected_node) {\r\n                        delete tree.selected_node.__selected__;\r\n                        _target            = tree.selected_node;\r\n                        tree.selected_node = null;\r\n                    }\r\n                    return _target;\r\n                },\r\n                get_parent:          function (node) {\r\n                    if (node && node.__parent_real__ !== null) {\r\n                        return scope.tree_nodes[node.__parent_real__];\r\n                    }\r\n                    return null;\r\n                },\r\n                for_all_ancestors:   function (child, fn) {\r\n                    _parent = tree.get_parent(child);\r\n                    if (_parent) {\r\n                        if (fn(_parent)) {\r\n                            return false;\r\n                        }\r\n\r\n                        return tree.for_all_ancestors(_parent, fn);\r\n                    }\r\n                    return true;\r\n                },\r\n                expand_all_parents:  function (child) {\r\n                    child = child || tree.selected_node;\r\n                    if (typeof child === 'object') {\r\n                        tree.for_all_ancestors(\r\n                            child, fnSetExpand\r\n                        )\r\n                    }\r\n                },\r\n                collapse_all_parents:               function (child) {\r\n                    child = child || tree.selected_node;\r\n                    if (typeof child === 'object') {\r\n                        tree.for_all_ancestors(\r\n                            child, fnSetCollapse\r\n                        )\r\n                    }\r\n                },\r\n\r\n                reload_data:                       function () {\r\n                    return scope.reload_data();\r\n                },\r\n                add_node:                          function (parent, new_node, index) {\r\n                    if (typeof index !== 'number') {\r\n                        if (parent) {\r\n                            parent.__children__.push(new_node);\r\n                            parent.__expanded__ = true;\r\n                        } else {\r\n                            scope.treeData.push(new_node);\r\n                        }\r\n                    } else {\r\n                        if (parent) {\r\n                            parent.__children__.splice(index, 0, new_node);\r\n                            parent.__expanded__ = true;\r\n                        } else {\r\n                            scope.treeData.splice(index, 0, new_node);\r\n                        }\r\n                    }\r\n                    return new_node;\r\n                },\r\n                add_node_root:                     function (new_node) {\r\n                    tree.add_node(null, new_node);\r\n                    return new_node;\r\n                },\r\n                expand_all:                        function () {\r\n                    len = scope.treeData.length;\r\n                    for (i = 0; i < len; i++) {\r\n                        tree.for_all_descendants(\r\n                            scope.treeData[i], fnSetExpand\r\n                        );\r\n                    }\r\n                },\r\n                collapse_all:                      function () {\r\n                    len = scope.treeData.length;\r\n                    for (i = 0; i < len; i++) {\r\n                        tree.for_all_descendants(\r\n                            scope.treeData[i], fnSetCollapse\r\n                        );\r\n                    }\r\n                },\r\n                remove_node:                       function (node) {\r\n                    node = node || tree.selected_node;\r\n                    if (typeof node === 'object') {\r\n                        if (node.__parent_real__ !== null) {\r\n                            _parent = tree.get_parent(node).__children__;\r\n                        } else {\r\n                            _parent = scope.treeData;\r\n                        }\r\n\r\n                        _parent.splice(node.__index__, 1);\r\n\r\n                        tree.reload_data();\r\n\r\n                        if (tree.selected_node === node) {\r\n                            tree.selected_node = null;\r\n                        }\r\n                    }\r\n                },\r\n                expand_node:                       function (node) {\r\n                    node = node || tree.selected_node;\r\n                    if (typeof node === 'object' && node.__expanded__) {\r\n                        node.__expanded__ = true;\r\n                        return node;\r\n                    }\r\n                },\r\n                collapse_node:                     function (node) {\r\n                    node = node || tree.selected_node;\r\n                    if (typeof node === 'object') {\r\n                        node.__expanded__ = false;\r\n                        return node;\r\n                    }\r\n                },\r\n                get_selected_node:                 function () {\r\n                    return tree.selected_node;\r\n                },\r\n                get_first_node:                    function () {\r\n                    len = scope.treeData.length;\r\n                    if (len > 0) {\r\n                        return scope.treeData[0];\r\n                    }\r\n                    return null;\r\n                },\r\n                get_children:                      function (node) {\r\n                    return node.__children__;\r\n                },\r\n                get_siblings:                      function (node) {\r\n                    node = node || tree.selected_node;\r\n                    if (typeof node === 'object') {\r\n                        _parent = tree.get_parent(node);\r\n                        if (_parent) {\r\n                            _target = _parent.__children__;\r\n                        } else {\r\n                            _target = scope.treeData;\r\n                        }\r\n                        return _target;\r\n                    }\r\n                },\r\n                get_next_sibling:                  function (node) {\r\n                    node = node || tree.selected_node;\r\n                    if (typeof node === 'object') {\r\n                        _target = tree.get_siblings(node);\r\n                        n       = _target.length;\r\n                        if (node.__index__ < n) {\r\n                            return _target[node.__index__ + 1];\r\n                        }\r\n                    }\r\n                },\r\n                get_prev_sibling:                  function (node) {\r\n                    node    = node || tree.selected_node;\r\n                    _target = tree.get_siblings(node);\r\n                    if (node.__index__ > 0) {\r\n                        return _target[node.__index__ - 1];\r\n                    }\r\n                },\r\n                get_first_child:                   function (node) {\r\n                    node = node || tree.selected_node;\r\n                    if (typeof node === 'object') {\r\n                        _target = node.__children__;\r\n                        if (_target && _target.length > 0) {\r\n                            return node.__children__[0];\r\n                        }\r\n                    }\r\n                    return null;\r\n                },\r\n                get_closest_ancestor_next_sibling: function (node) {\r\n                    node    = node || tree.selected_node;\r\n                    _target = tree.get_next_sibling(node);\r\n                    if (_target) {\r\n                        return _target;\r\n                    }\r\n\r\n                    _parent = tree.get_parent(node);\r\n                    return tree.get_closest_ancestor_next_sibling(_parent);\r\n                },\r\n                get_next_node:                     function (node) {\r\n                    node = node || tree.selected_node;\r\n\r\n                    if (typeof node === 'object') {\r\n                        _target = tree.get_first_child(node);\r\n                        if (_target) {\r\n                            return _target;\r\n                        } else {\r\n                            return tree.get_closest_ancestor_next_sibling(node);\r\n                        }\r\n                    }\r\n                },\r\n                get_prev_node:                     function (node) {\r\n                    node = node || tree.selected_node;\r\n\r\n                    if (typeof node === 'object') {\r\n                        _target = tree.get_prev_sibling(node);\r\n                        if (_target) {\r\n                            return tree.get_last_descendant(_target);\r\n                        }\r\n\r\n                        _parent = tree.get_parent(node);\r\n                        return _parent;\r\n                    }\r\n                },\r\n                get_last_descendant:               scope.getLastDescendant,\r\n                select_parent_node:                function (node) {\r\n                    node = node || tree.selected_node;\r\n\r\n                    if (typeof node === 'object') {\r\n                        _parent = tree.get_parent(node);\r\n                        if (_parent) {\r\n                            return tree.select_node(_parent);\r\n                        }\r\n                    }\r\n                },\r\n                select_first_node:                 function () {\r\n                    var firstNode = tree.get_first_node();\r\n                    return tree.select_node(firstNode);\r\n                },\r\n                select_next_sibling:               function (node) {\r\n                    node = node || tree.selected_node;\r\n\r\n                    if (typeof node === 'object') {\r\n                        _target = tree.get_next_sibling(node);\r\n                        if (_target) {\r\n                            return tree.select_node(_target);\r\n                        }\r\n                    }\r\n                },\r\n                select_prev_sibling:               function (node) {\r\n                    node = node || tree.selected_node;\r\n\r\n                    if (typeof node === 'object') {\r\n                        _target = tree.get_prev_sibling(node);\r\n                        if (_target) {\r\n                            return tree.select_node(_target);\r\n                        }\r\n                    }\r\n                },\r\n                select_next_node:                  function (node) {\r\n                    node = node || tree.selected_node;\r\n\r\n                    if (typeof node === 'object') {\r\n                        _target = tree.get_next_node(node);\r\n                        if (_target) {\r\n                            return tree.select_node(_target);\r\n                        }\r\n                    }\r\n                },\r\n                select_prev_node:                  function (node) {\r\n                    node = node || tree.selected_node;\r\n\r\n                    if (typeof node === 'object') {\r\n                        _target = tree.get_prev_node(node);\r\n                        if (_target) {\r\n                            return tree.select_node(_target);\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n            angular.extend(scope.tree, tree);\r\n            return scope.tree;\r\n        }\r\n\r\n        return _$init;\r\n    }\r\n);\n\nangular.module('template/TreeDnD/TreeDnD.html', []).run(\r\n    [\r\n        '$templateCache', function ($templateCache) {\r\n        $templateCache.put(\r\n            'template/TreeDnD/TreeDnD.html',\r\n            ['<table ng-class=\"$tree_class\">',\r\n             '    <thead>',\r\n             '  <tr>',\r\n             '     <th ng-class=\"expandingProperty.titleClass\" ng-style=\"expandingProperty.titleStyle\">',\r\n             '         {{expandingProperty.displayName || expandingProperty.field || expandingProperty}}',\r\n             '        <\\/th>',\r\n             '        <th ng-repeat=\"col in colDefinitions\" ng-class=\"col.titleClass\" ng-style=\"col.titleStyle\">',\r\n             '         {{col.displayName || col.field}}',\r\n             '     </th>',\r\n             '    </tr>',\r\n             '    </thead>',\r\n             ' <tbody tree-dnd-nodes>',\r\n             '  <tr tree-dnd-node=\"node\" ng-repeat=\"node in tree_nodes track by node.__hashKey__\" ',\r\n             '       ng-if=\"(node.__inited__ || node.__visible__)\"',\r\n             '       ng-click=\"onSelect(node)\" ',\r\n             '       ng-class=\"(node.__selected__ ? \\' active\\':\\'\\')\">',\r\n             '        <td tree-dnd-node-handle',\r\n             '          ng-style=\"expandingProperty.cellStyle ? expandingProperty.cellStyle : {\\'padding-left\\': $callbacks.calsIndent(node.__level__)}\"',\r\n             '          ng-class=\"expandingProperty.cellClass\"',\r\n             '          compile=\"expandingProperty.cellTemplate\">',\r\n             '              <a data-nodrag>',\r\n             '                  <i ng-class=\"node.__icon_class__\" ng-click=\"toggleExpand(node)\"',\r\n             '                     class=\"tree-icon\"></i>',\r\n             '              </a>',\r\n             '             {{node[expandingProperty.field] || node[expandingProperty]}}',\r\n             '       </td>',\r\n             '        <td ng-repeat=\"col in colDefinitions\" ng-class=\"col.cellClass\" ng-style=\"col.cellStyle\"',\r\n             '            compile=\"col.cellTemplate\">',\r\n             '            {{node[col.field]}}',\r\n             '       </td>',\r\n             '    </tr>',\r\n             '    </tbody>',\r\n             '</table>'].join('')\r\n        );\r\n\r\n        $templateCache.put(\r\n            'template/TreeDnD/TreeDnDStatusCopy.html',\r\n            '<label><i class=\"fa fa-copy\"></i>&nbsp;<b>Copying</b></label>'\r\n        );\r\n\r\n        $templateCache.put(\r\n            'template/TreeDnD/TreeDnDStatusMove.html',\r\n            '<label><i class=\"fa fa-file-text\"></i>&nbsp;<b>Moving</b></label>'\r\n        );\r\n    }]\r\n);\r\n\r\n})();"],"sourceRoot":"/source/"}